{"componentChunkName":"component---src-pages-search-jsx","path":"/search/","result":{"data":{"allMarkdownRemark":{"nodes":[{"excerpt":"스터디에서 다형적참조에 대해 발표하게 되어 정리해보고자 합니다. 0. 서론 다형적 참조에 대해 설명하기 전에 먼저 다형성(Polymorphism)에 대해 알아보죠. 다형성(Polymorphism)은 객체지향 프로그래밍의 중요한 개념중 하나로 여러가지 형태를 가질 수 있는 능력을 의미합니다. 예시를 들자면, 다형성(Polymorphism)은 부모 클래스 타…","fields":{"slug":"/archive/java/1/"},"frontmatter":{"date":"September 28, 2024","title":"[Java] 다형적 참조","description":"다형적 참조","tags":["Java","Study"],"series":"Java","previewImage":"writing-help.png","isPrivate":false},"rawMarkdownBody":"\n스터디에서 다형적참조에 대해 발표하게 되어 정리해보고자 합니다.\n\n## 0. 서론\n\n다형적 참조에 대해 설명하기 전에 먼저 다형성(Polymorphism)에 대해 알아보죠.   \n다형성(Polymorphism)은 객체지향 프로그래밍의 중요한 개념중 하나로 **여러가지 형태를 가질 수 있는 능력을 의미**합니다. 예시를 들자면, 다형성(Polymorphism)은 부모 클래스 타입의 변수가 자식 클래스 타입의 객체를 참조할 수 있다는 것을 뜻합니다.\n\n## 1. 다형적 참조란?\n\n다시 돌아와서 다형적 참조(Polymorphic Reference)에 대해 알아보죠.   \n다형적 참조(Polymorphic Reference)는 **부모 클래스 타입의 인스턴스로 자식 클래스 타입의 인스턴스를 참조 할 수 있는 기능**을 의미합니다. 이는 다형성을 실현하는 방법 중 하나입니다.\n\n다형성과 비슷하다고 생각할 수 있지만 다형성과 다형적 참조는 보시다싶이 서로 다른 개념입니다. \n다형성이 더 포괄적인 개념이죠.\n![다형성과다형적참조](/1.png)\n\n## 2. 예제코드\n\nAnimal 클래스와 Jaelong 클래스가 있다고 가정해보죠. \n두 클래스는 부모(Animal)와 자식(Jaelong) 관계입니다.\n\n```java\npublic class Animal {\n    public void print() {\n        System.out.println(\"Animal\");\n    }\n}\n```\n```java\npublic class Jaelong extends Animal {\n    public void print() {\n        System.out.println(\"Jaelong\");\n    }\n\n    public void sound() {\n        System.out.println(\"멍멍\");\n    }\n}\n```\n\n```java\npublic class PolyTest {\n    public static void main(String[] args) {\n        Animal animal = new Animal();\n        Animal animal2 = new Jaelong();\n\n        animal.print();\n        animal2.print();\n    }\n}\n```\n\n이렇게 코드가 되어있다면 결과를 어떻게 될까요?\n\n```\n[결과]\nAnimal\nJaelong\n```\n\n`Animal animal2 = new Jaelong();` 부분에서 **다형적 참조를 통해 자식 클래스의 인스턴스로 변경되었기 때문에 \"Jaelong\"이라고 결과가 나오게 된 것입니다**.\n\n그렇다며 소스코드가 이렇게 되었다면 결과가 어떻게 될까요?\n\n```java\npublic class PolyTest {\n    public static void main(String[] args) {\n        Animal animal = new Animal();\n        Animal animal2 = new Jaelong();\n\n        animal.print();\n        animal2.print();\n        // 추가\n        animal2.sound();\n    }\n}\n```\n\n소스를 실행시키면 컴파일 에러가 발생합니다. 왜 그런걸까요?   \n다형적 참조로 자식 클래스의 인스턴스를 참조 했고 Jaelong 클래스에는 sound()가 있는데 말이죠.\n\n![소스분석](/2.png)\n`animal 변수`가 생성이 될때 메모리에 Animal 클래스만 로드가 됩니다. 반면에 `animal2 변수` 생성이 될때는 Jaelong 클래스와 부모 클래스인 Animal까지 같이 생성이 됩니다. \n\n![소스분석2](/3.png)\n`animal2 변수`는 Animal 타입으로 선언했기 때문에 먼저 Animal 클래스에 sound() 메소드가 있는지 확인합니다. **메소드를 찾는 방향은 자식->부모순으로 Animal (부모)에서 내려가면서 찾을 수는 없습니다.** 따라서 컴파일 오류가 발생한 것입니다. Jaelong 클래스로 다운 캐스팅후 호출하면 오류 없이 호출 할 수 있습니다.\n\n```java\npublic class PolyTest {\n    public static void main(String[] args) {\n        Animal animal = new Animal();\n        Animal animal2 = new Jaelong();\n\n        animal.print();\n        animal2.print();\n        // 추가\n        // animal2.sound(); // 컴파일 에러\n        ((Jaelong) animal2).sound(); // 다운 캐스팅후 호출\n    }\n}\n```\n\n## 3. 정리\n\n+ 다형성(Polymorphism)\n   + 객체지향 프로그래밍의 개념중 하나로 여러가지 형태를 가질 수 있는 능력을 의미합니다. \n+ 다형적 참조(Polymorphic Reference)\n   + 부모 클래스 타입의 인스턴스로 자식 클래스 타입의 인스턴스를 참조 할 수 있는 기능을 의미합니다. \n+ 메소드를 찾는 방향은 자식->부모순으로, 부모에서 내려가면서 찾을 수는 없습니다."},{"excerpt":"0. 서론 최근 면접을 보러 다니면서  Git 브랜치 전략에 대해 설명해 달라는 기술 질문을 공통적으로 받게 되었습니다. 사실 Git으로 소스 commit만 했지, 깊이있게 공부 하지 않았기 때문에 해당 질문에 대답 할 수 없었습니다. 따라서, Git 브랜치 전략에 대해 정리해보고자 합니다. 1. Git 브랜치 전략이란? Git은 브랜치라는 것을 사용하는…","fields":{"slug":"/archive/tech/1/"},"frontmatter":{"date":"September 04, 2024","title":"[기술면접] Git 브랜치 전략","description":"Git 브랜치 전략","tags":["Tech","Git"],"series":"기술면접","previewImage":"writing-help.png","isPrivate":false},"rawMarkdownBody":"\n## 0. 서론\n최근 면접을 보러 다니면서  **Git 브랜치 전략**에 대해 설명해 달라는 기술 질문을 공통적으로 받게 되었습니다. 사실 Git으로 소스 commit만 했지, 깊이있게 공부 하지 않았기 때문에 해당 질문에 대답 할 수 없었습니다.\n\n따라서, Git 브랜치 전략에 대해 정리해보고자 합니다.\n\n## 1. Git 브랜치 전략이란?\n\nGit은 브랜치라는 것을 사용하는데요. 브랜치는 특정 시점 스냅샷 같은 개념이라고 생각하시면 됩니다.   \n브랜치를 사용하면 한 프로젝트에서 서로 여러 작업을 동시에 수행하면서도, 작업간의 영향을 최소화 할 수 있습니다.\n\n이런 Git의 브랜치를 관리하는 전략을 Git 브랜치 전략이라고 말합니다.\n\n## 2. Git 브랜치 전략 사용 목적\n\n그렇다면 Git 브랜치 전략을 사용하는 목적이 뭘까요?   \nGit 브랜치 전략을 사용하는 목적에는 여러가지가 있지만 **문제가 생겼을 때 빠르게 복구하기 위해서**라고 생각합니다. 앞서 설명한 것처럼 브랜치를 사용하면 여러 가지 작업을 동시에 안전하게 진행할 수 있고, 언제든지 문제가 생기면 원래 상태로 돌아갈 수 있습니다.   \n\n## 3. Git 브랜치 전략 종류\n\n대표적인 Git 브랜치 전략에 대해 알아보겠습니다.\n\n+ Git Flow\n  + 브랜치 설명\n    + `main 브랜치`\n      + main 또는 master 브랜치 의미.\n      + 항상 배포 가능한 상태를 유지해야 합니다.\n    + `develop 브랜치` \n      + 개발이 완료된 코드를 통합하는 브랜치.\n      + 모든 기능은 develop 브랜치로 병합된 후 테스트 되어야 합니다.\n    + `feature 브랜치` \n      + 개발을 위해 develop 브랜치에서 파생된 브랜치.\n      + 개발이 완료되면 develop 브랜치로 병합됩니다.\n    + `release 브랜치` \n      + 배포 준비가 된 코드를 관리하는 브랜치.\n      + develop 브랜치에서 파생되어 테스트와 버그 수정을 거쳐 main 브랜치에 병합됩니다.\n    + `hotfix 브랜치`\n      + main 브랜치에서 직접 파생된 브랜치.\n      + 긴급한 버그 수정을 위해 사용되며, 수정 후 main과 develop 브랜치에 병합됩니다.\n  + 과정\n  ![GitFlow](https://images.squarespace-cdn.com/content/v1/5cd29903aadd34273bef66f8/50f3fcb5-5798-481c-85f0-5a85f0886ed9/Gitflow.png?format=2500w)\n  + 특징\n    + 복잡한 프로젝트에서 브랜치를 체계적으로 관리하기 위한 전략입니다. **주로 여러 단계의 개발과 배포를 체계적으로 관리하고자 할 때 사용**됩니다.\n    + **릴리즈와 관련된 버전을 체계적으로 관리하는 데 유리**합니다.\n  + 장/단점\n    + 개발과 릴리즈 준비를 분리하여 안정성을 유지할 수 있습니다.\n    + 브랜치가 많아지면 복잡해질수 있습니다.\n+ GitHub Flow\n  + 브랜치 설명\n    + `main 브랜치`:\n      + Git Flow의 `main 브랜치`와 동일합니다.\n    + `feature 브랜치`:\n      + 기능 또는 버그 수정을 위해 main 브랜치에서 파생된 브랜치\n      + 개발이 완료되면 `pull request`를 통해 코드 리뷰를 받고 main 브랜치로 병합됩니다.\n  + 과정\n  ![GitHubFlow](https://images.squarespace-cdn.com/content/v1/5cd29903aadd34273bef66f8/e05668eb-89fa-4ee0-8350-35c93d029fad/GitHub+Flow.png?format=2500w)\n  + 특징\n    + 소규모이거나 빠른 배포 주기를 가진 프로젝트를 위해 제안된 **간단하고 단순한 브랜치 전략**입니다.\n    + 단일 main 브랜치에서 이루어지며, feature 브랜치를 통해 코드 변경을 관리합니다.\n    + GitHub Flow는 PR 생성 시 자동으로 테스트가 실행되도록 설정할 수 있습니다. 이를 통해 코드가 main 브랜치에 병합되기 전에 버그가 없는지 기능이 정상적으로 동작하는지를 확인할 수 있습니다. 이를 통해 소스 코드의 품질까지 향상 시킬 수 있습니다.\n  + 장/단점\n    + 간단하고 직관적인 구조, 빠른 배포와 피드백 주기에 적합합니다.\n    + 릴리즈와 핫픽스 관리가 다소 비효율적일 수 있습니다.\n+ GitLab Flow\n  + 브랜치 설명\n    + `production 브랜치`\n      + 운영 환경에 배포되는 브랜치.\n    + `environment-specific 브랜치`\n      + 다양한 환경(staging, pre-production 등)에 맞는 브랜치로, 각 환경에 맞게 코드가 준비됩니다.\n    + `feature 브랜치`\n      + 개발을 위한 브랜치로 특정 환경 브랜치에 병합됩니다.\n  + 과정\n  ![GitLabFlow](https://images.squarespace-cdn.com/content/v1/5cd29903aadd34273bef66f8/87ed52b9-cb2e-456a-b345-c04121fb49b2/Gitlab+flow.png?format=2500w)\n  + 특징\n    + **GitHub Flow와 Git Flow의 장점을 결합**한 브랜치 전략입니다.\n    + 주로 main 브랜치와 feature 브랜치 외에도 환경 기반 브랜치를 사용합니다.\n  + 장/단점\n    + 환경에 맞는 브랜치 관리로 안정성 향상시킬 수 있으나, 환경 브랜치 관리가 복잡할 수 있습니다.\n## 4. 결론\n배포를 체계적으로 해야되는 경우에는 Git Flow를 사용하고, 배포를 자주 해야되는 경우에는 GitHub Flow를 사용하면 될 것 같습니다.\n프로젝트의 규모와 배포 주기에 따라서 알맞은 Git 브랜치 전략을 세우는것이 중요합니다.\n\n+ 참조\n  + https://be-student.tistory.com/83\n  + https://parkstate.tistory.com/33\n  + https://www.eisquare.co.uk/blogs/how-to-choose-your-branching-strategy"},{"excerpt":"1. 현상 A팝업 -> B팝업 -> C팝업으로 호출하는 경우 B팝업에서만 팝업 호출 시 해당 화면이 reload 되는 현상이 발생했다. 2. 원인 form 태그 안에  button 태그가 1개만 있는 경우에 onclick() 이벤트와 동시에 submit()도 같이 동작된다. 그래서 발생한 오류였다. 3. 해결 방법1) 방법2) 이런 방법 말고도 검색해보면…","fields":{"slug":"/error/2/"},"frontmatter":{"date":"August 25, 2024","title":"[오류] 팝업 여러개 띄울때 화면 reload 발생","description":"팝업 여러개 띄울때 화면 reload 발생","tags":["Error","Web"],"series":"오류 모음집","previewImage":"how.png","isPrivate":false},"rawMarkdownBody":"\n## 1. 현상 \nA팝업 -> B팝업 -> C팝업으로 호출하는 경우 B팝업에서만 팝업 호출 시 해당 화면이 reload 되는 현상이 발생했다.\n\n## 2. 원인\n```html\n<form>\n    <button onclick=\"test();\"></button>\n</form>\n```\n**form 태그 안에  button 태그가 1개만 있는 경우에 onclick() 이벤트와 동시에 submit()도 같이** 동작된다. 그래서 발생한 오류였다.\n\n## 3. 해결\n+ 방법1)\n```html\n<form id=\"testForm\" method=\"post\" target=\"iframe1\">\n    <iframe id=\"iframe1\" name=\"iframe1\" style=\"display:none\"></iframe>\n</form>\n```\n+ 방법2)\n```html\n<form id=\"testForm\" method=\"post\" target=\"iframe1\">\n    <button type=\"button\" onclick=\"test();\"></button>\n</form>\n```\n이런 방법 말고도 검색해보면 다른 방법이 많이 있지만 나의 경우에는 이 2가지 방법으로 했을 때 오류가 발생하지 않았다.   \n\nbutton 태그에 대해서 좀 더 알아보다가 재미난 글을 발견하였다.   \n👉🏻[버튼에 타입을 쓰는 이유 (button type='button')](https://nykim.work/96 \"버튼에 타입을 쓰는 이유 (button type='button')\")\n\n+ 참조\n    + https://nykim.work/96"},{"excerpt":"1. 현상  메소드를 이용해서 js를 분기처리 하는데 SSL 적용이 된 운영서버에서 http 리소스가 로드되어서 에러가 발생하였다. 2. 원인 web서버에서 was서버를 호출할때는 http 통신이기 때문에 isSecure() 메소드에서 false가 나온 것이다. 3. 해결 방법1) 방법2) 위와 같이 2가지 방법이 있는데 처음에는 x-forwarded-p…","fields":{"slug":"/error/3/"},"frontmatter":{"date":"August 25, 2024","title":"[오류] https 도메인인데 request.isSecure() return false인 경우","description":"https 도메인인데 request.isSecure() return false인 경우","tags":["Error","Web"],"series":"오류 모음집","previewImage":"how.png","isPrivate":false},"rawMarkdownBody":"\n## 1. 현상 \n`request.isSecure()` 메소드를 이용해서 js를 분기처리 하는데 SSL 적용이 된 운영서버에서 http 리소스가 로드되어서 에러가 발생하였다.\n```\n<%\n   if( !request.isSecure() ) {\n%>\n\t<!-- http -->\n<%\n    } else {\n%>\n\t<!-- https -->\n<%\n    }\n%>\n```\n\n## 2. 원인\nweb서버에서 was서버를 호출할때는 http 통신이기 때문에 isSecure() 메소드에서 false가 나온 것이다.\n\n## 3. 해결\n+ 방법1) \n```\nrequest.getHeader(\"x-forwarded-proto\")\n```\n+ 방법2) \n```\nrequest.getRequestURL().indexOf(\"http://\") != -1\n```\n위와 같이 2가지 방법이 있는데 처음에는 x-forwarded-proto를 이용해서 하였으나 로드밸런서가 없는 로컬과 개발에서는 null로 나와서 방법 2로 변경하였다.\n\n> x-forwarded-proto \n> + 클라이언트가 로드밸런서에 접속할 때 사용한 프토토콜을 식별하는 표준 헤더\n\n+ 참조\n    + https://zetawiki.com/wiki/X-Forwarded-Proto\n"},{"excerpt":"1. 현상 2. 원인 3. 해결 참조","fields":{"slug":"/sample/test/"},"frontmatter":{"date":"August 25, 2024","title":"test","description":"tet","tags":["Error","Web"],"series":"오류 모음집","previewImage":"java_logo.png","isPrivate":true},"rawMarkdownBody":"\n## 1. 현상 \n## 2. 원인\n## 3. 해결\n+ 참조\n"},{"excerpt":"환경설정 개발툴 : InteliJ Spring Boot : 2.7.14 Quartz : 2.3.2 Java : 11 Gradle SpringBoot Spring Boot에서 Quartz 연동 하는 예제를 소개합니다. 1. bulid.gradle 파일에 추가 2. @Scheduled 어노테이션을 이용 스케쥴러를 적용할 메소드에  어노테이션을 사용합니다. 이…","fields":{"slug":"/archive/spring/1/"},"frontmatter":{"date":"August 25, 2024","title":"[Spring Boot] Quartz 연동 예제","description":"Spring Boot Quartz 연동 예제","tags":["Srping Boot","Quartz"],"series":"Spring Boot","previewImage":"springboot_logo.png","isPrivate":false},"rawMarkdownBody":"\n> 환경설정\n> + 개발툴 : InteliJ\n> + Spring Boot : 2.7.14\n> + Quartz : 2.3.2\n> + Java : 11\n> + Gradle\n\n![SpringBoot](/images/springboot_post.png)\n\nSpring Boot에서 Quartz 연동 하는 예제를 소개합니다.\n\n## 1. bulid.gradle 파일에 추가 \n```\nimplementation \"org.springframework.boot:spring-boot-starter-quartz\"\n```\n\n## 2. @Scheduled 어노테이션을 이용\n스케쥴러를 적용할 메소드에 `@Scheduled` 어노테이션을 사용합니다.\n```java\n@Controller\npublic class QuartzController {\n    @Scheduled(cron = \"0/5 * * * * ?\")\n    public void everyFiveSeconds() {\n        DateTimeFormatter patten = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\n        String formatDt = patten.format(LocalDateTime.now());\n\n        System.out.println(formatDt);\n    }\n}\n```\n`@SpringBootApplication`이 붙은 파일에 `@EnableScheduling` 어노테이션를 추가합니다.   \n추가 하지 않으면 스케쥴러가 실행되지 않습니다.\n```java\n@SpringBootApplication\n@EnableScheduling\npublic class Application {\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n    }\n}\n```\n> @EnableScheduling\n> + 스케쥴러를 기능을 켜는 역할을 하며, @Scheduled 어노테이션을 찾아서 실행을 시킨다.\n\n## 3. 실행 결과\n5초마다 실행 된것을 확인 할 수 있습니다.\n![SpringBoot](./result.png)\n+ 참조\n    + https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/scheduling/annotation/EnableScheduling.html"},{"excerpt":"환경설정 개발툴 : InteliJ Spring Boot : 2.7.14 Hibernate : 5.6.15 Java : 11 Gradle SpringBoot 검색을 해보면 application.properties 파일에 이 내용을 추가하면 파라미터 바인딩이 출력된다고 하는데, 저의 경우에는 그렇게 해도 나오지 않았습니다. 이 글을 참고하여 하니 원하는 결과…","fields":{"slug":"/archive/jpa/1/"},"frontmatter":{"date":"August 25, 2024","title":"[JPA] Hibernate 쿼리 파라미터 바인딩 출력","description":"Hibernate 쿼리 파라미터 바인딩 출력","tags":["JPA","Hibernate"],"series":"JPA","previewImage":"jpa.png","isPrivate":false},"rawMarkdownBody":"\n> 환경설정\n> + 개발툴 : InteliJ\n> + Spring Boot : 2.7.14\n> + Hibernate : 5.6.15\n> + Java : 11\n> + Gradle\n\n![SpringBoot](/images/hibernate_post.png)\n\n검색을 해보면 application.properties 파일에   \n```\nlogging.level.org.hibernate.SQL = debug\nlogging.level.org.hibernate.type.descriptor.sql = trace\n```\n이 내용을 추가하면 파라미터 바인딩이 출력된다고 하는데, 저의 경우에는 그렇게 해도 나오지 않았습니다.   \n이 글을 참고하여 하니 원하는 결과가 나왔습니다.   \n👉🏻[hibernate 의 완성된(?) 쿼리를 확인 하는 방법 문의 드립니다](https://www.inflearn.com/community/questions/59014/hibernate-%EC%9D%98-%EC%99%84%EC%84%B1%EB%90%9C-%EC%BF%BC%EB%A6%AC%EB%A5%BC-%ED%99%95%EC%9D%B8-%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95-%EB%AC%B8%EC%9D%98-%EB%93%9C%EB%A6%BD%EB%8B%88%EB%8B%A4)\n\n\n## 1. bulid.gradle 파일에 추가 \n```\nimplementation 'org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4.1:1.16'\n```\n\n## 2. logback.xml 파일 추가\n`resources` 폴더 밑에 `logback.xml` 파일을 만들어줍니다.\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n    <appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">\n        <layout class=\"ch.qos.logback.classic.PatternLayout\">\n            <Pattern>%d{HH:mm} %-5level %logger{36} - %msg%n</Pattern>\n        </layout>\n    </appender>\n\n    <logger name=\"org.hibernate.type\" level=\"trace\" />\n\n    <root level=\"info\">\n        <appender-ref ref=\"STDOUT\" />\n    </root>\n</configuration>\n```\n\n## 3. 실행 결과\n파라미터가 같이 나오는 것을 확인 할 수 있습니다.\n![실행결과](./result.png)\n+ 참조\n    + https://www.inflearn.com/questions/59014/hibernate-%EC%9D%98-%EC%99%84%EC%84%B1%EB%90%9C-%EC%BF%BC%EB%A6%AC%EB%A5%BC-%ED%99%95%EC%9D%B8-%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95-%EB%AC%B8%EC%9D%98-%EB%93%9C%EB%A6%BD%EB%8B%88%EB%8B%A4"},{"excerpt":"1. 현상 개발서버 https 적용으로 아래와 같이 http 요청 블락 에러가 발생하였다. 그래서 아래의 메타 태그를 추가해 줬다.  하지만 개발서버 https 적용을 해제하면서부터 화면 접속시 자동으로  로 붙어서 js, css를 읽는 경우가 발생하였다. 2. 원인 https때문에 추가했던 메타 태그의 문제로, content-security-policy…","fields":{"slug":"/error/1/"},"frontmatter":{"date":"August 23, 2024","title":"[오류] 자동으로 도메인에 https가 붙는 경우","description":"자동으로 도메인에 https가 붙는 경우","tags":["Error","Web"],"series":"오류 모음집","previewImage":"how.png","isPrivate":false},"rawMarkdownBody":"\n## 1. 현상 \n개발서버 https 적용으로 아래와 같이 http 요청 블락 에러가 발생하였다.\n```\nThis request has been blocked; the content must be served over HTTPS.\n```\n그래서 아래의 메타 태그를 추가해 줬다. \n```html\n<meta http-equiv=\"Content-Security-Policy\" content=\"upgrade-insecure-requests\">\n```\n하지만 개발서버 https 적용을 해제하면서부터 화면 접속시 자동으로 `https://` 로 붙어서 js, css를 읽는 경우가 발생하였다.\n\n## 2. 원인\n```html\n<meta http-equiv=\"Content-Security-Policy\" content=\"upgrade-insecure-requests\">\n```\nhttps때문에 추가했던 메타 태그의 문제로, content-security-policy를 설정할 경우 자동으로 https로 호출해 주는 것이었다. \n```\nThe HTTP Content-Security-Policy (CSP) upgrade-insecure-requests directive instructs user agents to treat all of a site's insecure URLs (those served over HTTP) as though they have been replaced with secure URLs (those served over HTTPS).\nHTTP Content-Security-Policy(CSP) upgrade-insecure-requests\n```\n\n## 3. 해결\n해당 태그를 주석처리 하면 현상은 해결되지만, 개발서버에 https 적용 시 http 요청 블락 에러를 이 방법 말고 다른 방법으로 해야 될 것 같다. 로컬은 http인데 개발서버는 https인 경우에는 이 메타태그를 사용하는 것은 좋은 방법이 아닌 것 같다.\n\n+ 참조\n  + https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/upgrade-insecure-requests\n"},{"excerpt":"Default Private Posts This is a default private post. It's recommended not to delete this posts 😵 (현재 이 포스트는 삭제하지 말아주세요.)","fields":{"slug":"/default/private-default/"},"frontmatter":{"date":"January 01, 2024","title":"Default Private","description":null,"tags":["private-tag"],"series":null,"previewImage":"banned.png","isPrivate":true},"rawMarkdownBody":"\n## Default Private Posts\n\nThis is a default private post. It's recommended not to delete this posts 😵\n\n(현재 이 포스트는 삭제하지 말아주세요.)\n"},{"excerpt":"환경설정 개발툴 : 이클립스 Spring : 4.3.3 Quartz : 2.3.0 Tomcat : 8.5 Java : 8 서버 :CentOS 1. 현상 개발서버에서 톰캣 프로세스가 여러개가 뜨면서 메모리 너무 많이 잡아먹는 현상이 발생하였다.\nnetstate -tnlp 하면 8080포트는 하나만 나오고, ps -ef | grep tomcat 하면 여러개 …","fields":{"slug":"/error/4/"},"frontmatter":{"date":"August 12, 2023","title":"[오류] 톰캣 프로세스 여러개 뜨는 경우","description":"톰캣 프로세스 여러개 뜨는 경우","tags":["Error","Tomcat"],"series":"오류 모음집","previewImage":"how.png","isPrivate":false},"rawMarkdownBody":"\n> 환경설정\n> + 개발툴 : 이클립스\n> + Spring : 4.3.3\n> + Quartz : 2.3.0\n> + Tomcat : 8.5\n> + Java : 8\n> + 서버 :CentOS\n\n## 1. 현상 \n개발서버에서 톰캣 프로세스가 여러개가 뜨면서 메모리 너무 많이 잡아먹는 현상이 발생하였다.\n**netstate -tnlp 하면 8080포트는 하나만 나오고, ps -ef | grep tomcat 하면 여러개 나왔다.**\n\n## 2. 원인\n검색을 하다가 아래의 글을 보고 quartz 스케쥴러의 문제라고 생각이 들었다. \n톰캣 서버가 종료되어도 이미 실행된 job 스레드는 종료되지 않고 계속 남는다.   \n👉🏻[톰켓 프로세스 종료 이슈](https://log4day.tistory.com/m/59 \"톰켓 프로세스 종료 이슈\")\n\n## 3. 해결\ndestroy-method 속성을 이용해서 SchedulerFactoryBean 클래스에 있는 destroy() 메소드를 추가해줬다.\n```xml\n<bean id=\"qcrmJobScheduler\" class=\"org.springframework.scheduling.quartz.SchedulerFactoryBean\" destroy-method=\"destroy\">\n    <property name=\"triggers\">\n        <list>\n            <ref bean=\"testJobTrigger\" />\n        </list>\n    </property>\n</bean>\n```\n\n## + 추가(2023.10.13)\n위 방법으로 적용 후에도 계속 발생하여 젠킨스 배포시 실행중인 톰캣 프로세스 모두 종료시키는 쉘 스크립트를 추가하였다.\n```shell\n#!/bin/bash\n\ntomcat_pids=$(ps aux | grep tomcat | grep java | grep -v grep | awk '{print $2}')\n\nif [ -n \"$tomcat_pids\" ]; then\n    for pid in $tomcat_pids; do\n        echo \"PID: $pid\"\n        kill -9 $pid\n    done\nfi\n```\n\n+ 참조\n    + https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/scheduling/quartz/SchedulerFactoryBean.htmlhttps://log4day.tistory.com/m/59\n    + https://log4day.tistory.com/m/59\n"},{"excerpt":"💡 현 포스트는 about 페이지에서도 조회 가능합니다. 포스트를 삭제하지 말고, 이 곳에다 본인만의 멋진 소개 글을 작성해주세요.","fields":{"slug":"/default/about/"},"frontmatter":{"date":"January 01, 2022","title":"Gatsby Starter Haon 저자에 대해 소개합니다.","description":null,"tags":["about"],"series":null,"previewImage":null,"isPrivate":true},"rawMarkdownBody":"\n> 💡 현 포스트는 about 페이지에서도 조회 가능합니다. 포스트를 삭제하지 말고, 이 곳에다 본인만의 멋진 소개 글을 작성해주세요.\n"}]}},"pageContext":{}},"staticQueryHashes":[],"slicesMap":{}}