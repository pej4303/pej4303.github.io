{"componentChunkName":"component---src-pages-search-jsx","path":"/search/","result":{"data":{"allMarkdownRemark":{"nodes":[{"excerpt":"1. 현상 A팝업 -> B팝업 -> C팝업으로 호출하는 경우 B팝업에서만 팝업 호출 시 해당 화면이 reload 되는 현상이 발생했다. 2. 원인 form 태그 안에  button 태그가 1개만 있는 경우에 onclick() 이벤트와 동시에 submit()도 같이 동작된다. 그래서 발생한 오류였다. 3. 해결 방법1) 방법2) 이런 방법 말고도 검색해보면…","fields":{"slug":"/error/2/"},"frontmatter":{"date":"August 25, 2024","title":"[오류] 팝업 여러개 띄울때 화면 reload 발생","description":"팝업 여러개 띄울때 화면 reload 발생","tags":["Error","Web"],"series":"오류 모음집","previewImage":"how.png","isPrivate":false},"rawMarkdownBody":"\n## 1. 현상 \nA팝업 -> B팝업 -> C팝업으로 호출하는 경우 B팝업에서만 팝업 호출 시 해당 화면이 reload 되는 현상이 발생했다.\n\n## 2. 원인\n```html\n<form>\n    <button onclick=\"test();\"></button>\n</form>\n```\n**form 태그 안에  button 태그가 1개만 있는 경우에 onclick() 이벤트와 동시에 submit()도 같이** 동작된다. 그래서 발생한 오류였다.\n\n## 3. 해결\n+ 방법1)\n```html\n<form id=\"testForm\" method=\"post\" target=\"iframe1\">\n    <iframe id=\"iframe1\" name=\"iframe1\" style=\"display:none\"></iframe>\n</form>\n```\n+ 방법2)\n```html\n<form id=\"testForm\" method=\"post\" target=\"iframe1\">\n    <button type=\"button\" onclick=\"test();\"></button>\n</form>\n```\n이런 방법 말고도 검색해보면 다른 방법이 많이 있지만 나의 경우에는 이 2가지 방법으로 했을 때 오류가 발생하지 않았다.   \n\nbutton 태그에 대해서 좀 더 알아보다가 재미난 글을 발견하였다.   \n👉🏻[버튼에 타입을 쓰는 이유 (button type='button')](https://nykim.work/96 \"버튼에 타입을 쓰는 이유 (button type='button')\")\n\n+ 참조\n    + https://nykim.work/96"},{"excerpt":"1. 현상  메소드를 이용해서 js를 분기처리 하는데 SSL 적용이 된 운영서버에서 http 리소스가 로드되어서 에러가 발생하였다. 2. 원인 web서버에서 was서버를 호출할때는 http 통신이기 때문에 isSecure() 메소드에서 false가 나온 것이다. 3. 해결 방법1) 방법2) 위와 같이 2가지 방법이 있는데 처음에는 x-forwarded-p…","fields":{"slug":"/error/3/"},"frontmatter":{"date":"August 25, 2024","title":"[오류] https 도메인인데 request.isSecure() return false인 경우","description":"https 도메인인데 request.isSecure() return false인 경우","tags":["Error","Web"],"series":"오류 모음집","previewImage":"how.png","isPrivate":false},"rawMarkdownBody":"\n## 1. 현상 \n`request.isSecure()` 메소드를 이용해서 js를 분기처리 하는데 SSL 적용이 된 운영서버에서 http 리소스가 로드되어서 에러가 발생하였다.\n```\n<%\n   if( !request.isSecure() ) {\n%>\n\t<!-- http -->\n<%\n    } else {\n%>\n\t<!-- https -->\n<%\n    }\n%>\n```\n\n## 2. 원인\nweb서버에서 was서버를 호출할때는 http 통신이기 때문에 isSecure() 메소드에서 false가 나온 것이다.\n\n## 3. 해결\n+ 방법1) \n```\nrequest.getHeader(\"x-forwarded-proto\")\n```\n+ 방법2) \n```\nrequest.getRequestURL().indexOf(\"http://\") != -1\n```\n위와 같이 2가지 방법이 있는데 처음에는 x-forwarded-proto를 이용해서 하였으나 로드밸런서가 없는 로컬과 개발에서는 null로 나와서 방법 2로 변경하였다.\n\n> x-forwarded-proto \n> + 클라이언트가 로드밸런서에 접속할 때 사용한 프토토콜을 식별하는 표준 헤더\n\n+ 참조\n    + https://zetawiki.com/wiki/X-Forwarded-Proto\n"},{"excerpt":"환경설정 개발툴 : InteliJ Spring Boot : 2.7.14 Hibernate : 5.6.15 Java : 11 Gradle SpringBoot 검색을 해보면 application.properties 파일에 이 내용을 추가하면 파라미터 바인딩이 출력된다고 하는데, 저의 경우에는 그렇게 해도 나오지 않았습니다. 이 글을 참고하여 하니 원하는 결과…","fields":{"slug":"/archive/jpa/1/"},"frontmatter":{"date":"August 25, 2024","title":"[JPA] Hibernate 쿼리 파라미터 바인딩 출력","description":"Hibernate 쿼리 파라미터 바인딩 출력","tags":["JPA","Hibernate"],"series":"JPA","previewImage":"jpa.png","isPrivate":false},"rawMarkdownBody":"\n> 환경설정\n> + 개발툴 : InteliJ\n> + Spring Boot : 2.7.14\n> + Hibernate : 5.6.15\n> + Java : 11\n> + Gradle\n\n![SpringBoot](/images/hibernate_post.png)\n\n검색을 해보면 application.properties 파일에   \n```\nlogging.level.org.hibernate.SQL = debug\nlogging.level.org.hibernate.type.descriptor.sql = trace\n```\n이 내용을 추가하면 파라미터 바인딩이 출력된다고 하는데, 저의 경우에는 그렇게 해도 나오지 않았습니다.   \n이 글을 참고하여 하니 원하는 결과가 나왔습니다.   \n👉🏻[hibernate 의 완성된(?) 쿼리를 확인 하는 방법 문의 드립니다](https://www.inflearn.com/community/questions/59014/hibernate-%EC%9D%98-%EC%99%84%EC%84%B1%EB%90%9C-%EC%BF%BC%EB%A6%AC%EB%A5%BC-%ED%99%95%EC%9D%B8-%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95-%EB%AC%B8%EC%9D%98-%EB%93%9C%EB%A6%BD%EB%8B%88%EB%8B%A4)\n\n\n## 1. bulid.gradle 파일에 추가 \n```\nimplementation 'org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4.1:1.16'\n```\n\n## 2. logback.xml 파일 추가\n`resources` 폴더 밑에 `logback.xml` 파일을 만들어줍니다.\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n    <appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">\n        <layout class=\"ch.qos.logback.classic.PatternLayout\">\n            <Pattern>%d{HH:mm} %-5level %logger{36} - %msg%n</Pattern>\n        </layout>\n    </appender>\n\n    <logger name=\"org.hibernate.type\" level=\"trace\" />\n\n    <root level=\"info\">\n        <appender-ref ref=\"STDOUT\" />\n    </root>\n</configuration>\n```\n\n## 3. 실행 결과\n파라미터가 같이 나오는 것을 확인 할 수 있습니다.\n![실행결과](./result.png)\n+ 참조\n    + https://www.inflearn.com/questions/59014/hibernate-%EC%9D%98-%EC%99%84%EC%84%B1%EB%90%9C-%EC%BF%BC%EB%A6%AC%EB%A5%BC-%ED%99%95%EC%9D%B8-%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95-%EB%AC%B8%EC%9D%98-%EB%93%9C%EB%A6%BD%EB%8B%88%EB%8B%A4"},{"excerpt":"1. 현상 2. 원인 3. 해결 참조","fields":{"slug":"/sample/test/"},"frontmatter":{"date":"August 25, 2024","title":"test","description":"tet","tags":["Error","Web"],"series":"오류 모음집","previewImage":"java_logo.png","isPrivate":true},"rawMarkdownBody":"\n## 1. 현상 \n## 2. 원인\n## 3. 해결\n+ 참조\n"},{"excerpt":"환경설정 개발툴 : InteliJ Spring Boot : 2.7.14 Quartz : 2.3.2 Java : 11 Gradle SpringBoot Spring Boot에서 Quartz 연동 하는 예제를 소개합니다. 1. bulid.gradle 파일에 추가 2. @Scheduled 어노테이션을 이용 스케쥴러를 적용할 메소드에  어노테이션을 사용합니다. 이…","fields":{"slug":"/archive/spring/1/"},"frontmatter":{"date":"August 25, 2024","title":"[Spring Boot] Quartz 연동 예제","description":"Spring Boot Quartz 연동 예제","tags":["Srping Boot","Quartz"],"series":"Spring Boot","previewImage":"springboot_logo.png","isPrivate":false},"rawMarkdownBody":"\n> 환경설정\n> + 개발툴 : InteliJ\n> + Spring Boot : 2.7.14\n> + Quartz : 2.3.2\n> + Java : 11\n> + Gradle\n\n![SpringBoot](/images/springboot_post.png)\n\nSpring Boot에서 Quartz 연동 하는 예제를 소개합니다.\n\n## 1. bulid.gradle 파일에 추가 \n```\nimplementation \"org.springframework.boot:spring-boot-starter-quartz\"\n```\n\n## 2. @Scheduled 어노테이션을 이용\n스케쥴러를 적용할 메소드에 `@Scheduled` 어노테이션을 사용합니다.\n```java\n@Controller\npublic class QuartzController {\n    @Scheduled(cron = \"0/5 * * * * ?\")\n    public void everyFiveSeconds() {\n        DateTimeFormatter patten = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\n        String formatDt = patten.format(LocalDateTime.now());\n\n        System.out.println(formatDt);\n    }\n}\n```\n`@SpringBootApplication`이 붙은 파일에 `@EnableScheduling` 어노테이션를 추가합니다.   \n추가 하지 않으면 스케쥴러가 실행되지 않습니다.\n```java\n@SpringBootApplication\n@EnableScheduling\npublic class Application {\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n    }\n}\n```\n> @EnableScheduling\n> + 스케쥴러를 기능을 켜는 역할을 하며, @Scheduled 어노테이션을 찾아서 실행을 시킨다.\n\n## 3. 실행 결과\n5초마다 실행 된것을 확인 할 수 있습니다.\n![SpringBoot](./result.png)\n+ 참조\n    + https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/scheduling/annotation/EnableScheduling.html"},{"excerpt":"1. 현상 개발서버 https 적용으로 아래와 같이 http 요청 블락 에러가 발생하였다. 그래서 아래의 메타 태그를 추가해 줬다.  하지만 개발서버 https 적용을 해제하면서부터 화면 접속시 자동으로  로 붙어서 js, css를 읽는 경우가 발생하였다. 2. 원인 https때문에 추가했던 메타 태그의 문제로, content-security-policy…","fields":{"slug":"/error/1/"},"frontmatter":{"date":"August 23, 2024","title":"[오류] 자동으로 도메인에 https가 붙는 경우","description":"자동으로 도메인에 https가 붙는 경우","tags":["Error","Web"],"series":"오류 모음집","previewImage":"how.png","isPrivate":false},"rawMarkdownBody":"\n## 1. 현상 \n개발서버 https 적용으로 아래와 같이 http 요청 블락 에러가 발생하였다.\n```\nThis request has been blocked; the content must be served over HTTPS.\n```\n그래서 아래의 메타 태그를 추가해 줬다. \n```html\n<meta http-equiv=\"Content-Security-Policy\" content=\"upgrade-insecure-requests\">\n```\n하지만 개발서버 https 적용을 해제하면서부터 화면 접속시 자동으로 `https://` 로 붙어서 js, css를 읽는 경우가 발생하였다.\n\n## 2. 원인\n```html\n<meta http-equiv=\"Content-Security-Policy\" content=\"upgrade-insecure-requests\">\n```\nhttps때문에 추가했던 메타 태그의 문제로, content-security-policy를 설정할 경우 자동으로 https로 호출해 주는 것이었다. \n```\nThe HTTP Content-Security-Policy (CSP) upgrade-insecure-requests directive instructs user agents to treat all of a site's insecure URLs (those served over HTTP) as though they have been replaced with secure URLs (those served over HTTPS).\nHTTP Content-Security-Policy(CSP) upgrade-insecure-requests\n```\n\n## 3. 해결\n해당 태그를 주석처리 하면 현상은 해결되지만, 개발서버에 https 적용 시 http 요청 블락 에러를 이 방법 말고 다른 방법으로 해야 될 것 같다. 로컬은 http인데 개발서버는 https인 경우에는 이 메타태그를 사용하는 것은 좋은 방법이 아닌 것 같다.\n\n+ 참조\n  + https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/upgrade-insecure-requests\n"},{"excerpt":"Default Private Posts This is a default private post. It's recommended not to delete this posts 😵 (현재 이 포스트는 삭제하지 말아주세요.)","fields":{"slug":"/default/private-default/"},"frontmatter":{"date":"January 01, 2024","title":"Default Private","description":null,"tags":["private-tag"],"series":null,"previewImage":"banned.png","isPrivate":true},"rawMarkdownBody":"\n## Default Private Posts\n\nThis is a default private post. It's recommended not to delete this posts 😵\n\n(현재 이 포스트는 삭제하지 말아주세요.)\n"},{"excerpt":"환경설정 개발툴 : 이클립스 Spring : 4.3.3 Quartz : 2.3.0 Tomcat : 8.5 Java : 8 서버 :CentOS 1. 현상 개발서버에서 톰캣 프로세스가 여러개가 뜨면서 메모리 너무 많이 잡아먹는 현상이 발생하였다.\nnetstate -tnlp 하면 8080포트는 하나만 나오고, ps -ef | grep tomcat 하면 여러개 …","fields":{"slug":"/error/4/"},"frontmatter":{"date":"August 12, 2023","title":"[오류] 톰캣 프로세스 여러개 뜨는 경우","description":"톰캣 프로세스 여러개 뜨는 경우","tags":["Error","Tomcat"],"series":"오류 모음집","previewImage":"how.png","isPrivate":false},"rawMarkdownBody":"\n> 환경설정\n> + 개발툴 : 이클립스\n> + Spring : 4.3.3\n> + Quartz : 2.3.0\n> + Tomcat : 8.5\n> + Java : 8\n> + 서버 :CentOS\n\n## 1. 현상 \n개발서버에서 톰캣 프로세스가 여러개가 뜨면서 메모리 너무 많이 잡아먹는 현상이 발생하였다.\n**netstate -tnlp 하면 8080포트는 하나만 나오고, ps -ef | grep tomcat 하면 여러개 나왔다.**\n\n## 2. 원인\n검색을 하다가 아래의 글을 보고 quartz 스케쥴러의 문제라고 생각이 들었다. \n톰캣 서버가 종료되어도 이미 실행된 job 스레드는 종료되지 않고 계속 남는다.   \n👉🏻[톰켓 프로세스 종료 이슈](https://log4day.tistory.com/m/59 \"톰켓 프로세스 종료 이슈\")\n\n## 3. 해결\ndestroy-method 속성을 이용해서 SchedulerFactoryBean 클래스에 있는 destroy() 메소드를 추가해줬다.\n```xml\n<bean id=\"qcrmJobScheduler\" class=\"org.springframework.scheduling.quartz.SchedulerFactoryBean\" destroy-method=\"destroy\">\n    <property name=\"triggers\">\n        <list>\n            <ref bean=\"testJobTrigger\" />\n        </list>\n    </property>\n</bean>\n```\n\n## + 추가(2023.10.13)\n위 방법으로 적용 후에도 계속 발생하여 젠킨스 배포시 실행중인 톰캣 프로세스 모두 종료시키는 쉘 스크립트를 추가하였다.\n```shell\n#!/bin/bash\n\ntomcat_pids=$(ps aux | grep tomcat | grep java | grep -v grep | awk '{print $2}')\n\nif [ -n \"$tomcat_pids\" ]; then\n    for pid in $tomcat_pids; do\n        echo \"PID: $pid\"\n        kill -9 $pid\n    done\nfi\n```\n\n+ 참조\n    + https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/scheduling/quartz/SchedulerFactoryBean.htmlhttps://log4day.tistory.com/m/59\n    + https://log4day.tistory.com/m/59\n"},{"excerpt":"💡 현 포스트는 about 페이지에서도 조회 가능합니다. 포스트를 삭제하지 말고, 이 곳에다 본인만의 멋진 소개 글을 작성해주세요.","fields":{"slug":"/default/about/"},"frontmatter":{"date":"January 01, 2022","title":"Gatsby Starter Haon 저자에 대해 소개합니다.","description":null,"tags":["about"],"series":null,"previewImage":null,"isPrivate":true},"rawMarkdownBody":"\n> 💡 현 포스트는 about 페이지에서도 조회 가능합니다. 포스트를 삭제하지 말고, 이 곳에다 본인만의 멋진 소개 글을 작성해주세요.\n"}]}},"pageContext":{}},"staticQueryHashes":[],"slicesMap":{}}