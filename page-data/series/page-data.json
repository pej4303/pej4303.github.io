{"componentChunkName":"component---src-pages-series-jsx","path":"/series/","result":{"data":{"site":{"siteMetadata":{"title":"보통사람","description":"Dev Note","author":"pej4303","siteUrl":"https://pej4303.github.io","keywords":["java","backend","blog"]}},"allMarkdownRemark":{"nodes":[{"excerpt":"1. 📝 문제 요약 문제 URL : https://www.acmicpc.net/problem/1697 난이도 : 실버1 소요시간 : 31분 2. 💡 내 풀이 방법 시도1 접근 방법 입력 방문배열 만들기 bfs으로 탐색 출력 소스 코드 3. 🔍 문제 회고 문제을 읽고 가장 빠른 시간이 몇 초 후인지 구하는 문제여서 bfs문제라고 생각이 들었다. 방문배열과 큐에 넣을때 어떤 자료구조로 해야될까 고민을 많이 하였다. 방문배열은 범위에 맞는 0 ~ 100000까지만 하면 되니까 int 배열로 선언하였고, 큐에는 현재 위치와 시간을 같이 넣어야 되어서 int 배열로 선언하였다. 핵심 로직인 \"다음에 탐색할 위치를 어떻게 정의하고 큐에 넣을지\" 에서 약간의 막힘이 있었지만\n결국 현재 위치에서 -1, +1, *2의 세 가지 이동을 모두 시도하면서 방문하지 않은 위치만 큐에 넣으면 된다는 단순한 원리였다. 📚 참조","fields":{"slug":"/archive/algorithm/31/"},"frontmatter":{"title":"[백준] 숨바꼭질 Java","description":"숨바꼭질 Java","date":"2025-07-12","tags":["Algorithm","백준","코딩테스트"],"series":"백준","previewImage":"writing.png","isPrivate":false}},{"excerpt":"1. 📝 문제 요약 문제 URL : https://www.acmicpc.net/problem/1932 난이도 : 실버1 소요시간 : 30분 2. 💡 내 풀이 방법 시도1 접근 방법 입력 DP 테이블 생성 DP 처리 출력 소스 코드 3. 🔍 문제 회고 문제을 읽고 다이나믹 프로그래밍 문제라고 생각했다. dp 점화식을 떠오르지 않아서 검색에 의존했다. 문제를 처음 보았을 때 단순 탐색으로는 비효율적일 것 같아 다이나믹 프로그래밍(DP)으로 접근해야 한다고 판단했다.\n아래로 내려오면서 최댓값을 누적해서 계산해야 했고 이를 위해 이전 계산 결과를 기반으로 다음 값을 구할 수 있는 점화식을 도출하는 것이 핵심 과제였다. DP 테이블을 2배열로 선언하고 각 위치에서 올 수 있는 경로를 고려하여 최댓값을 누적하는 방식으로 점화식을 완성했다. 삼각형의 양쪽 끝은 경로가 하나이므로 예외 처리를 통해 처리하였다. 점화식이 완성된 이후에는 구현은 수월하게 이루어졌고, 정답을 맞출 수 있었다.\n다만, …","fields":{"slug":"/archive/algorithm/30/"},"frontmatter":{"title":"[백준] 정수 삼각형 Java","description":"정수 삼각형 Java","date":"2025-07-09","tags":["Algorithm","백준","코딩테스트"],"series":"백준","previewImage":"writing.png","isPrivate":false}},{"excerpt":"1. 📝 문제 요약 문제 URL : https://www.acmicpc.net/problem/1149 난이도 : 실버1 소요시간 : 50분 2. 💡 내 풀이 방법 시도1 접근 방법 입력 DP 테이블 생성 DP 처리 출력 소스 코드 3. 🔍 문제 회고 \"모든 집을 칠하되 총 비용이 최소가 되도록 하라\"는 조건과 인접한 집을 같은 색으로 칠할 수 없는 제약이 있는 문제였다. 단순히 모든 경우를 시도하기엔 집의 수가 많아질수록 계산량이 폭발적으로 늘어날 수 있다는 점에서 효율적인 접근이 필요했다. 각 집을 어떤 색으로 칠할지를 결정하면서 인접한 집과 색이 겹치지 않도록 하고 전체 칠하는 비용의 합이 최소가 되도록 해야 했다. 문제를 처음 접했을 때는 어떻게 풀어야 할지 감이 오지 않아 검색에 의존했다. 이후에 색상과 집 번호라는 두 가지 상태를 기준으로 2차원 DP 테이블을 만들고 이전 집의 색에 따라 현재 집의 최소 비용을 계산하는 점화식을 세워 문제를 해결했다. DP의 개념을 코드에…","fields":{"slug":"/archive/algorithm/29/"},"frontmatter":{"title":"[백준] RGB거리 Java","description":"RGB거리 Java","date":"2025-07-05","tags":["Algorithm","백준","코딩테스트"],"series":"백준","previewImage":"writing.png","isPrivate":false}},{"excerpt":"1. 📝 문제 요약 문제 URL : https://www.acmicpc.net/problem/2667 난이도 : 실버1 소요시간 : 40분 2. 💡 내 풀이 방법 시도1 접근 방법 입력 BFS 탐색 오름차순으로 정렬 출력 소스 코드 3. 🔍 문제 회고 문제에서 '1'로 연결된 영역의 개수와 각 영역의 크기를 구하는 전형적인 탐색 문제였다. BFS를 사용하여 지도 상의 연결된 단지를 탐색하고 각 단지에 포함된 집의 수를 구해 오름차순으로 출력하는 것이 목표였다. 를 사용한 을 구현하려고 했다. 하지만 평소에 자주 사용하지 않았던 BFS 코드가 잘 기억나지 않아 구현에 시간이 오래 걸렸다. 탐색한 집의 수를 list에 담아 정렬 후 출력하였다. 전형적인 BFS 유형의 문제였지만 익숙하지 않아 구현에 시간이 많이 소요되었고 결국 제한 시간을 초과해 아쉬운 결과를 얻게 되었다. BFS 로직에 대한 기억이 흐릿했던 점이 원인이었고 BFS 기본 패턴을 다시 복습할 필요성을 느꼈다. 그리고 입…","fields":{"slug":"/archive/algorithm/28/"},"frontmatter":{"title":"[백준] 단지번호붙이기 Java","description":"단지번호붙이기 Java","date":"2025-06-23","tags":["Algorithm","백준","코딩테스트"],"series":"백준","previewImage":"writing.png","isPrivate":false}},{"excerpt":"1. 📝 문제 요약 문제 URL : https://www.acmicpc.net/problem/10819 난이도 : 실버2 소요시간 : 35분 2. 💡 내 풀이 방법 시도1 접근 방법 입력 DFS를 이용해서 순열 만들기 완전탐색 최댓값 찾기 출력 소스 코드 3. 🔍 문제 회고 입력된 숫자의 개수가 최대 8개라는 점을 보고 완전탐색이 가능하다고 판단했다. 하지만 배열의 숫자들을 어떤 순서로 나열해서 조합을 만들지 고민하던 중 검색을 통해 DFS를 이용해서 모든 가능한 순서를 만들 수 있다는 사실을 알게 되었다. 이 문제는 주어진 숫자들을 한 번씩만 사용해 인접한 수들의 차이의 총합이 가장 큰 순서를 찾는 것이 목표였다. DFS를 활용하여 숫자들을 한 번씩만 사용해 만들 수 있는 모든 순서를 생성했고 각 순서에 대해 인접한 숫자들의 차이를 모두 더한 후 Math.max()를 이용해 최댓값을 갱신했다. 문제는 무리 없이 해결했지만 숫자를 나열하는 방식에 대해 처음부터 스스로 끝까지 시도해…","fields":{"slug":"/archive/algorithm/27/"},"frontmatter":{"title":"[백준] 차이를 최대로 Java","description":"차이를 최대로 Java","date":"2025-06-21","tags":["Algorithm","백준","코딩테스트"],"series":"백준","previewImage":"writing.png","isPrivate":false}},{"excerpt":"1. 📝 문제 요약 문제 URL : https://www.acmicpc.net/problem/2304 난이도 : 실버2 소요시간 : 50분 2. 💡 내 풀이 방법 시도1 접근 방법 입력 L, H를 클래스로 리스트에 저장 L 기준 정렬 최대 높이의 인덱스 찾기 로직 처리 왼쪽 → 중앙까지 현재 높이가 최대높이보다 크면 면적구하기 오른쪽 → 중앙까지 면적 계산 최대 높이 기둥 면적 추가 출력 소스 코드 3. 🔍 문제 회고 문제를 처음 접했을 때 막대들이 이루는 전체 면적을 단순히 나누어 계산하는 방식으로 접근했다. 하지만 그렇게 하기보다는 가장 높은 막대를 기준으로 왼쪽과 오른쪽을 나눠서 면적을 계산하는 것이 더 효율적이라는 점을 파악할 수 있었다. 이 문제는 주어진 좌표(L)와 높이(H)를 이용해 복잡하지 않게 전체 면적을 계산해야 하는 과제였다. 먼저 L과 H를 라는 클래스로 별도로 분리하여 리스트 타입으로 입력을 받았다. 계산하기 쉽게 L 기준으로 정렬을 해준 기준점이 되는 다음…","fields":{"slug":"/archive/algorithm/26/"},"frontmatter":{"title":"[백준] 창고 다각형 Java","description":"창고 다각형 Java","date":"2025-06-14","tags":["Algorithm","백준","코딩테스트"],"series":"백준","previewImage":"writing.png","isPrivate":false}},{"excerpt":"1. 📝 문제 요약 문제 URL : https://school.programmers.co.kr/learn/courses/30/lessons/17682 난이도 : 레벨1 2. 💡 내 풀이 방법 시도1 접근 방법 점수 List 선언 횟수마다 자르기 - 정규표현식 이용 각 횟수 점수 계산 answer 반환 소스 코드 3. 🔍 문제 회고 문제의 기본 로직은 점수와 보너스를 분리해서 계산하는 구조였기 때문에 전반적으로 어렵지 않았다.\n하지만 점수 구간(특히 10점 처리)과 옵션(*, #) 적용 로직 구현에서 시간이 다소 소요되었고 특히 * 옵션이 이전 점수뿐 아니라 현재 점수에도 영향을 미친다는 점이 구현 포인트였다. 각 회차별 점수와 옵션을 파싱하고 그에 따라 점수를 계산해 최종 합계를 구하는 것이 과제였다. 정규표현식을 활용해 점수, 보너스, 옵션을 한 번에 추출하는 방식을 택했고 정규식 그룹별로 값을 나눠 뽑은 뒤 옵션에 따라 점수를 수정하는 로직을 순차적으로 구현했다. 특히  옵션이…","fields":{"slug":"/archive/algorithm/25/"},"frontmatter":{"title":"[프로그래머스] [1차] 다트게임 Java","description":"[1차] 다트게임 Java","date":"2025-06-13","tags":["Algorithm","프로그래머스","코딩테스트"],"series":"프로그래머스","previewImage":"writing.png","isPrivate":false}},{"excerpt":"1. 📝 문제 요약 문제 URL : https://www.acmicpc.net/problem/1138 난이도 : 실버2 2. 💡 내 풀이 방법 시도1 접근 방법 입력 받기 index랑 사람수를 같이 저장할 클래스 선언 list에 넣기 사람수를 기준으로 오름차순 출력 문제점 단순 오름차순 정렬로는 사람 수 조건을 모두 만족하기 어렵다. 자리 배치를 하면서 현재 배열 상태를 고려해야 하기 때문에 이 방식은 논리적으로 성립하지 않음 정렬보다는 \"자리 찾기\" 방식으로 풀어야 한다. 시도2 접근 방법 입력 받기 결과를 저장할 배열 result 선언 N까지 반복 arr[i-1] → 왼쪽에 있어야 할 키 큰 사람 수 = peopleCnt result 배열에서 다음을 반복: 0(빈칸)을 만날 때마다 cnt 변수 값 증가 cnt와 peopleCnt이 같으면 빈칸 위치에 i번 사람을 배치 한번 배치하면 루프 종료 출력 소스 코드 3. 🔍 문제 회고 처음에는 사람 번호와 왼쪽에 있어야 할 사람 수를 …","fields":{"slug":"/archive/algorithm/24/"},"frontmatter":{"title":"[백준] 한 줄로 서기 Java","description":"한 줄로 서기 Java","date":"2025-06-12","tags":["Algorithm","백준","코딩테스트"],"series":"백준","previewImage":"writing.png","isPrivate":false}},{"excerpt":"1. 문제 요약 문제 URL : https://school.programmers.co.kr/learn/courses/30/lessons/42889 난이도 : 레벨1 2. 내 풀이 방법 시도1 접근 방법 Stage 클래스 선언, Stage 타입의 List 선언 스테이지 개수 만큼 for문 수행 실패율 로직 처리 해당 index와 동일한 번호가 있으면 실패율 계산 없다면 도달한 유저가 없는것으로 실패율을 0으로 정의 list에 담기 list 정렬 실패율 내림차순 같으면 스테이지 오름차순 list -> int[] 변환 answer 반환 소스 코드 3. 문제 회고 🔍 시도 문제를 처음 읽고 대략적인 구현 방법은 금방 떠올랐다. 하지만 실패율 계산 로직과 정렬 기준 구현에서 조금 막혔다. 특히 실패율을 정확히 계산하고 이를 기준으로 스테이지 번호까지 고려하여 정렬하는 부분이 생각보다 까다로웠다. 🛠 해결 과정 실패율은 각 스테이지에 도달한 사용자 수를 기준으로 해당 스테이지를 클리어하지 못…","fields":{"slug":"/archive/algorithm/23/"},"frontmatter":{"title":"[프로그래머스] 실패율 Java","description":"실패율 Java","date":"2025-06-11","tags":["Algorithm","프로그래머스","코딩테스트"],"series":"프로그래머스","previewImage":"writing.png","isPrivate":false}},{"excerpt":"1. 문제 요약 문제 URL : https://school.programmers.co.kr/learn/courses/30/lessons/340199 난이도 : 레벨1 2. 내 풀이 방법 시도1 접근 방법 minBill > minWallet 이거나 maxBill > maxWallet인 동안만 while문 반복 bill[0]과 bill[1]를 비교하여 큰 값을 2로 나누고 나머지를 버림 minBill, maxBill 값 갱신 answer 값 증가 answer 반환 소스 코드 3. 문제 회고 🔍 시도 문제 지문에 구현 방식이 친절하게 설명되어 있어 그대로 따라가며 구현하기만 하면 되는 문제였다. 🛠 해결 과정 반복문을 이용해 bill의 작은 값이 wallet의 작은 값 보다 크거나 bill의 큰 값이 wallet의 큰 값 보다 큰 동안 과정을 반복하면 된다. bill[0]이 bill[1]보다 크다면 bill[0]을 2로 나누고 그렇지 않다면 bill[1]을 2로 나누고 나머지는 버린다.…","fields":{"slug":"/archive/algorithm/22/"},"frontmatter":{"title":"[프로그래머스] [PCCE 기출문제] 9번 / 지폐 접기 Java","description":"[PCCE 기출문제] 9번 / 지폐 접기 Java","date":"2025-06-10","tags":["Algorithm","프로그래머스","코딩테스트"],"series":"프로그래머스","previewImage":"writing.png","isPrivate":false}},{"excerpt":"1. 문제 요약 문제 URL : https://school.programmers.co.kr/learn/courses/30/lessons/17681 난이도 : 레벨1 2. 내 풀이 방법 시도1 접근 방법 문자열 연산을 많이 해야 하니 StringBuilder 사용 arr1, arr2를 순회 각 항목을 이진수로 변환 - Integer.toBinaryString 각 항목에 '1'이 하나라도 있으면 '#', 둘다 '0'이면 공백으로 표시 answer 반환 소스 코드 3. 문제 회고 🔍 시도 문제를 읽고 각 항목값을 비교하여 하나라도 1이면 '#', 둘 다 0이면 공백 ' '으로 표시하면 되겠다는 아이디어가 떠올랐다. 예제를 보며 예상한 방식이 정답과 일치하는지 확인했고 해당 흐름대로 구현하기로 결정했다. 🛠 해결 과정 arr1, arr2 배열을 순회하며 각 요소를 십진수에서 이진수로 변환하였다. 그 후 n자리로 자릿수를 맞춘 이진수 문자열을 char[]로 비교하여 각 자릿수에서 두 값이 …","fields":{"slug":"/archive/algorithm/21/"},"frontmatter":{"title":"[프로그래머스] [1차] 비밀지도 Java","description":"[1차] 비밀지도 Java","date":"2025-06-09","tags":["Algorithm","프로그래머스","코딩테스트"],"series":"프로그래머스","previewImage":"writing.png","isPrivate":false}},{"excerpt":"1. 문제 요약 문제 URL : https://school.programmers.co.kr/learn/courses/30/lessons/42586 난이도 : 레벨2 2. 내 풀이 방법 시도1 접근 방법 process 라는 클래스를 생성, List 타입도 하나 생성 Stack 타입으로 생성하여 작업 진도와 개발 속도를 함께 체크 progresses 배열을 스택으로 변환 스택을 순회하면서 해당값이 100이 되면 pop() 그 다음값도 100이 되는지 체크 answer 반환 문제점 문제의 진행 순서는 앞에서부터 순서대로 처리되어야 하며 (후입선출)은 부적절하다. 선입선출(FIFO)에 해당하는 Queue 또는 일반 for 순회가 더 적절하다. 작업 완료 순서를 정확히 유지하기 어렵다. 불필요한 클래스 생성 및 자료구조 사용으로 복잡도 증가한다. 시도2 접근 방법 각 기능이 완료되기까지 걸리는 날짜 계산 - for문 로직 처리 첫 번째 작업의 완료일을 기준 - pivot 순회하며 pivot…","fields":{"slug":"/archive/algorithm/20/"},"frontmatter":{"title":"[프로그래머스] 기능 개발 Java","description":"기능 개발 Java","date":"2025-06-07","tags":["Algorithm","프로그래머스","코딩테스트"],"series":"프로그래머스","previewImage":"writing.png","isPrivate":false}},{"excerpt":"1. 문제 요약 문제 URL : https://school.programmers.co.kr/learn/courses/30/lessons/133502 난이도 : 레벨1 2. 내 풀이 방법 시도1 접근 방법 ingredient 배열을 문자열(str)로 변환 로 치환이 될때마다 answer 증가 - while문 이용 answer 반환 문제점 테스트 케이스는 통과 하였으나 제출까지는 통과하지 못함 문자열 치환이 비효율적이다. String.replace(\"1231\", \"\")는 내부적으로 문자열 전체를 한 번 순회한다. → O(N) \"1231\"이 많다면 위 과정을 여러 번 반복한다. → O(N * \"1231\" 등장 횟수) 소스 코드 시도2 접근 방법 스택 생성 ingredient 배열을 순회 각 원소를 넣으면서 스택의 마지막 4개의 값이 1231인지 체크하여 맞으면 pop()을 4번 수행, answer 증가 answer 반환 소스 코드 3. 문제 회고 🔍 시도 문제를 읽고 \"1231\" 패턴을…","fields":{"slug":"/archive/algorithm/19/"},"frontmatter":{"title":"[프로그래머스] 햄버거 만들기 Java","description":"햄버거 만들기 Java","date":"2025-06-05","tags":["Algorithm","프로그래머스","코딩테스트"],"series":"프로그래머스","previewImage":"writing.png","isPrivate":false}},{"excerpt":"1. 문제 요약 문제 URL : https://school.programmers.co.kr/learn/courses/30/lessons/12909 난이도 : 레벨2 2. 내 풀이 방법 시도1 접근 방법 스택 생성 문자열 를 char 배열로 변환해 순회 - for문 이용 로직 처리 스택이 비어있지 않고 현재 문자가 이고 스택의 top이 이면 pop() 그 외의 경우는 push() 스택이 비어 있으면 true 아니면 false를 반환 소스 코드 3. 문제 회고 🔍 시도 처음 문제를 읽고 나서 스택으로 접근하는 방식이 자연스럽게 떠올랐다. 괄호의 짝을 맞추는 전형적인 문제였기 때문이다. 🛠 해결 과정 처음에는 if-else 구조를 잘못 사용해서 결과가 잘못 나왔다. push()는 괄호의 짝이 맞지 않을 때 반드시 호출되어야 하는데 조건문 안에서만 처리하다 보니 예외가 발생했던 것이다. 나누었던 조건문을 하나로 합쳤더니 테스트 케이스를 모두 통과하였다. ✅ 잘한 점 스택 자료구조를 이용해…","fields":{"slug":"/archive/algorithm/18/"},"frontmatter":{"title":"[프로그래머스] 올바른 괄호 Java","description":"올바른 괄호 Java","date":"2025-06-04","tags":["Algorithm","프로그래머스","코딩테스트"],"series":"프로그래머스","previewImage":"writing.png","isPrivate":false}},{"excerpt":"1. 문제 요약 문제 URL : https://school.programmers.co.kr/learn/courses/30/lessons/42587 난이도 : 레벨2 2. 내 풀이 방법 시도1 접근 방법 우선순위 큐 생성, index 변수 생성 우선순위 큐에 priorities 배열 담기 우선순위 큐를 순회하면서 index가 location과 같으면 break 다르면 answer 증가 answer 반환 문제점 우선순위 큐를 넣으면 순서가 달라진다. 시도2 접근 방법 큐 생성 큐에 priorities 배열 담기 로직 처리 실행 대기 큐(Queue)에서 대기중인 프로세스 하나를 꺼냅니다. 큐에 대기중인 프로세스 중 우선순위가 더 높은 프로세스가 있다면 방금 꺼낸 프로세스를 다시 큐에 넣습니다. 만약 그런 프로세스가 없다면 방금 꺼낸 프로세스를 실행합니다. 한 번 실행한 프로세스는 다시 큐에 넣지 않고 그대로 종료됩니다. answer 반환 소스 코드 3. 문제 회고 🔍 시도 문제를 읽고 …","fields":{"slug":"/archive/algorithm/17/"},"frontmatter":{"title":"[프로그래머스] 프로세스 Java","description":"프로세스 Java","date":"2025-06-03","tags":["Algorithm","프로그래머스","코딩테스트"],"series":"프로그래머스","previewImage":"writing.png","isPrivate":false}},{"excerpt":"1. 문제 요약 문제 URL : https://school.programmers.co.kr/learn/courses/30/lessons/131704 난이도 : 레벨2 2. 내 풀이 방법 시도1 접근 방법 현재 박스 번호를 나타내는 nowBoxNum 변수, 보조 컨테이너 벨트 생성 - stack 이용 while문 이용 로직 처리 case1) 메인 컨테이너 벨트에서 박스를 꺼낼 수 있고 그 박스가 order[i]보다 작거나 같을 때 order와 현재 박스 번호가 같으면 트럭에 바로 싣고 다음 order로 이동 그렇지 않으면 보조 컨테이너 벨트에 보관하고 다음 박스로 이동 case2) 메인 벨트에서 꺼낼 수 없거나 order[i]가 현재보다 작은 경우 보조 컨테이너 벨트의 맨 위 박스가 실어야 할 박스면 트럭에 싣기 아니면 더 이상 실을 수 없으므로 종료 - break 위의 과정을 반복하며 order 배열의 끝까지 처리 소스 코드 3. 문제 회고 🔍 시도 보조 컨테이너 벨트을 보고 자연…","fields":{"slug":"/archive/algorithm/16/"},"frontmatter":{"title":"[프로그래머스] 택배 상자 Java","description":"택배 상자 Java","date":"2025-05-31","tags":["Algorithm","프로그래머스","코딩테스트"],"series":"프로그래머스","previewImage":"writing.png","isPrivate":false}},{"excerpt":"1. 문제 요약 문제 URL : https://school.programmers.co.kr/learn/courses/30/lessons/64061 난이도 : 레벨1 2. 내 풀이 방법 시도1 접근 방법 바구니 생성 - 스택 이용 moves 배열을 순회 - for문 이용 각 항목을 순회하면서 해당 열에 맨 첫번째 값을 찾기 찾은값이 스택의 첫번째값이랑 같으면 pop() 아니면 push() answer return 소스 코드 3. 문제 회고 🔍 시도 처음 문제를 보고 인형을 하나씩 꺼내 바구니에 담는 구조가 스택과 유사하다고 판단했다. 그래서 바구니를 Stack으로 구현하고 인형이 두 개 연속으로 겹칠 경우 제거되는 로직을 중심으로 설계를 시작했다. 🛠 해결 과정 moves 배열을 순회하면서 각 열에서 인형을 하나씩 꺼낸다. 꺼낸 인형이 바구니의 맨 위 인형과 같으면 두 인형을 제거하고 answer를 추가한다. 그렇지 않으면 바구니에 인형을 넣는다. ✅ 잘한 점 문제를 보고 스택을 활…","fields":{"slug":"/archive/algorithm/15/"},"frontmatter":{"title":"[프로그래머스] 크레인 인형뽑기 게임 Java","description":"크레인 인형뽑기 게임 Java","date":"2025-05-28","tags":["Algorithm","프로그래머스","코딩테스트"],"series":"프로그래머스","previewImage":"writing.png","isPrivate":false}},{"excerpt":"1. 문제 요약 문제 URL : https://school.programmers.co.kr/learn/courses/30/lessons/150370 난이도 : 레벨1 2. 내 풀이 방법 시도1 접근 방법 약관 정보(terms) 배열을 Map 형태로 변환 각 약관명을 key로 유효기간을 일단위로 환산한 값을 value로 하여 형태로 변환한다. 예) \"A 6\" => map.put(\"A\", 6 * 28); 개인정보 수집 내역(privacies) 배열 순회 - for문 이용 파기 대상 여부 판단 개인정보 수집일자를 LocalDate로 변환한다. 해당 항목의 약관 유형을 기준으로 유효기간을 더해 파기 예정일을 계산한다. 파기 예정일 = 개인정보 수집일 + 유효기간(일) - 1 오늘 날짜와 파기 예정일을 비교한다. - isBefore() 이용 answer return 문제점 테스트 케이스를 통과하지 못해서 파기예정일을 출력해보았더니 예제와 맞지 않았다. 문제처럼 \"모든 달이 28일\" 이라는 …","fields":{"slug":"/archive/algorithm/14/"},"frontmatter":{"title":"[프로그래머스] 개인정보 수집 유효기간 Java","description":"개인정보 수집 유효기간 Java","date":"2025-05-27","tags":["Algorithm","프로그래머스","코딩테스트"],"series":"프로그래머스","previewImage":"writing.png","isPrivate":false}},{"excerpt":"1. 문제 요약 문제 URL : https://school.programmers.co.kr/learn/courses/30/lessons/176963 난이도 : 레벨1 2. 내 풀이 방법 시도1 접근 방법 name 배열과 yearning 배열을 기반으로 이름별 그리움 점수를 조회할 수 있도록 Map 형태로 변환 photo 배열을 순회 - for문 이용 이름이 map에 존재하는 경우 해당 점수를 더하고 존재하지 않으면 0을 더한다 - getOrDefault() answer 반환 소스 코드 3. 문제 회고 🔍 시도 문제를 처음 접했을 때  name 배열과 yearning 배열을 Map으로 변환하는 방식으로 하면 빠르게 풀 수 있을것같았다. 🛠 해결 과정 name과 yearning 배열을 순회하며 이름별 점수를  형태로 구성하였다. 각 photo마다 등장하는 이름들을 순회하면서 getOrDefault()로 점수를 누적하였고 사진별 총 점수를 answer 배열에 저장 후 반환하였다. ✅ 잘…","fields":{"slug":"/archive/algorithm/13/"},"frontmatter":{"title":"[프로그래머스] 추억점수 Java","description":"추억점수 Java","date":"2025-05-26","tags":["Algorithm","프로그래머스","코딩테스트"],"series":"프로그래머스","previewImage":"writing.png","isPrivate":false}},{"excerpt":"1. 문제 요약 문제 URL : https://school.programmers.co.kr/learn/courses/30/lessons/159994 난이도 : 레벨1 2. 내 풀이 방법 시도1 접근 방법 cards1, cards2 배열을 큐로 변환 goal 배열 순회 - for문 이용 현재 단어가 queue1.peek()이면 queue1.poll() 아니고 queue2.peek()이면 queue2.poll() 둘 다 아니면 return \"No\" 끝까지 다 순회했다면 return \"Yes\" 소스 코드 3. 문제 회고 🔍 시도 문제를 읽고 는 조건과 는 조건에 주목했다. 이 조건을 보고 FIFO 구조인 Queue를 사용하면 적절하겠다고 판단했다. 🛠 해결 과정 cards1과 cards2를 각각 Queue로 변환한 후 goal 배열을 순차적으로 순회하며 각 단어가 어떤 큐의 맨 앞에 있는지 확인했다.\nqueue1.peek()과 queue2.peek()를 비교해서 일치하면 poll()로 …","fields":{"slug":"/archive/algorithm/12/"},"frontmatter":{"title":"[프로그래머스] 카드뭉치 Java","description":"카드뭉치 Java","date":"2025-05-25","tags":["Algorithm","프로그래머스","코딩테스트"],"series":"프로그래머스","previewImage":"writing.png","isPrivate":false}},{"excerpt":"1. 문제 요약 문제 URL : https://school.programmers.co.kr/learn/courses/30/lessons/136798 난이도 : 레벨1 2. 내 풀이 방법 시도1 접근 방법 1부터 number까지 약수의 개수 구하기 number까지의 약수들 중 limit를 초과하는 값들은 power로 값 변경하여 합계 구하기 answer return 소스 코드 3. 문제 회고 🔍 시도 1부터 number까지 각 숫자의 약수 개수를 구한 후 그 개수가 limit을 초과하면 power로 대체하여 누적합(answer)을 계산하는 방식으로 문제를 해결하고자 했다. 🛠 해결 과정 약수 개수를 효율적으로 구하기 위해 제곱근까지만 순회하면서 중복 약수 계산을 방지하는 방식으로 calcCnt() 메서드를 구현했다. ✅ 잘한 점 문제의 구현 로직 자체는 복잡하지 않아 구조를 빠르게 설계할 수 있었고 약수 개수를 구할 때 중복을 방지하는 최적화도 잘 적용했다. ⚠ 개선할 점 초기 문제…","fields":{"slug":"/archive/algorithm/11/"},"frontmatter":{"title":"[프로그래머스] 기사단원의 무기 Java","description":"기사단원의 무기 Java","date":"2025-05-24","tags":["Algorithm","프로그래머스","코딩테스트"],"series":"프로그래머스","previewImage":"writing.png","isPrivate":false}},{"excerpt":"1. 문제 요약 문제 URL : https://school.programmers.co.kr/learn/courses/30/lessons/161990 난이도 : 레벨1 2. 내 풀이 방법 시도1 접근 방법 wallpaper 순회 - for문 이용 lux, luy, rdx, rdy 값 갱신 answer 배열에 lux, luy, rdx, rdy 값 저장 소스 코드 3. 문제 회고 🔍 시도 처음에는 단순히 이차원 배열을 순회하면서 #의 위치를 파악하고자 했다. 좌표의 최소값, 최대값을 추적하는 방식으로 접근하면 된다는 생각이이 바로 떠올랐다. 🛠 해결 과정 각 줄을 char[]로 변환해 이중 반복문으로 탐색하며 # 문자의 좌표를 확인하고 그에 따라 lux, luy, rdx, rdy 값을 실시간으로 갱신했다. Math.min()과 Math.max()를 이용해 깔끔하게 최소,최대 좌표를 계산할 수 있었다. ✅ 잘한 점 불필요한 자료구조 없이 최소,최대 좌표만 추적하는 방식으로 효율적으로 구현…","fields":{"slug":"/archive/algorithm/10/"},"frontmatter":{"title":"[프로그래머스] 바탕화면 정리 Java","description":"바탕화면 정리 Java","date":"2025-05-23","tags":["Algorithm","프로그래머스","코딩테스트"],"series":"프로그래머스","previewImage":"writing.png","isPrivate":false}},{"excerpt":"1. 문제 요약 문제 URL : https://school.programmers.co.kr/learn/courses/30/lessons/138477 난이도 : 레벨1 2. 내 풀이 방법 시도1 접근 방법 k길이 만큼 배열 생성 score 순회 - for문 이용 score값을 받아서 만든 배열 정렬 answer 배열에 k번째 값 저장 문제점 정렬을 매번 수행하면 시간복잡도가 올라간다. 시도2 접근 방법 우선순위 큐 생성 score 순회 - for문 이용 현재 점수를 우선순위 큐에 추가 큐의 길이가 k를 초과하면 가장 낮은 점수 제거 - poll() 현재 우선순위 큐에서 가장 낮은 점수를 answer에 저장 - peek() 소스 코드 3. 문제 회고 🔍 시도 처음에는 배열을 정렬하면 되지 않을까 생각하였으나 매번 정렬을 수행하면 시간복잡도에 문제가 있지 않을까 생각이 들었다. 🛠 해결 과정 우선순위 큐를 사용하여 항상 가장 낮은 점수를 유지하는 방식으로 문제를 해결했다. 큐에 점수를 …","fields":{"slug":"/archive/algorithm/9/"},"frontmatter":{"title":"[프로그래머스] 프로그래머스 명예의 전당1 Java","description":"명예의 전당1 Java","date":"2025-05-20","tags":["Algorithm","프로그래머스","코딩테스트"],"series":"프로그래머스","previewImage":"writing.png","isPrivate":false}},{"excerpt":"1. 문제 요약 문제 URL : https://school.programmers.co.kr/learn/courses/30/lessons/12915 난이도 : 레벨1 2. 내 풀이 방법 시도1 접근 방법 strings 순회 - for문 이용 strings 정렬시 n번째 글자순으로 - Arrays.sort() 문제점 이렇게 하면 for문을 할 필요가 없어진다. 시도2 접근 방법 n번재 글자순으로 정렬되게 - Arrays.sort() 이용 Comparator를 재정의하여 n번재 글자를 비교 같으면 글자를 비교 => 시간복잡도 O(n log n) 소스 코드 3. 문제 회고 🔍 시도 처음에는 for문으로 순회하며 정렬을 직접 구현하려 했지만 Java의 Arrays.sort()와 Comparator를 활용하면 훨씬 간단하고 효율적으로 문제를 해결할 수 있음을 알게 되었다. 🛠 해결 과정 Comparator를 람다식을 이용해서 재정의하여 n번째 문자를 기준으로 정렬하고 만약 두 문자의 값이 같…","fields":{"slug":"/archive/algorithm/8/"},"frontmatter":{"title":"[프로그래머스] 프로그래머스 문자열 내 마음대로 정렬하기 Java","description":"문자열 내 마음대로 정렬하기 Java","date":"2025-05-19","tags":["Algorithm","프로그래머스","코딩테스트"],"series":"프로그래머스","previewImage":"writing.png","isPrivate":false}},{"excerpt":"1. 문제 요약 문제 URL : https://www.acmicpc.net/problem/11720 난이도 : 브론즈4 문제 내용 : N개의 숫자가 공백 없이 문자열 형태로 주어질 때 이 숫자들의 합을 구하는 문제이다. 2. 내 풀이 방법 시도1 접근 방법  문자열을 한 글자씩 분리한 후 각 문자를 정수로 변환하여 합산한다. 문제점 정답은 맞지만 split()은 내부적으로 정규식을 사용하기 때문에 속도가 느리다. 소스 코드 시도2 접근 방법  String.toCharArray()로 문자 배열을 만든 뒤 각 문자를 '0'과의 차이로 정수로 변환하여 합산한다. 문제점 char 배열을 복사해서 반환하기 때문에 String.charAt() 보다 속도가 느리다. 시도3 접근 방법  charAt(i)을 사용하여 각 문자를 직접 접근하고 '0'을 빼서 정수로 변환한다. 별도의 배열을 만들지 않기 때문에 가장 빠른 방식이다. 각 방법들 성능 비교 위에 시도한 방법들은 모두 제출시 정답이다. 하지…","fields":{"slug":"/archive/algorithm/7/"},"frontmatter":{"title":"[BOJ] 백준 11720 숫자의 합 Java","description":"백준 11720 숫자의 합 Java","date":"2025-05-07","tags":["Algorithm","백준","코딩테스트"],"series":"백준","previewImage":"writing.png","isPrivate":false}},{"excerpt":"1. 문제 요약 문제 URL : https://school.programmers.co.kr/learn/courses/30/lessons/67256 난이도 : Lv.1 문제 내용 : 2. 내 풀이 방법 시도1 접근 방법 문제의 설명대로 구현하였으며 2, 5, 8, 0과 같은 번호에 대해 거리를 계산해야 한다는 점을 고려하였다. 손의 위치를 갱신하며 각 번호의 거리 계산을 통해 더 가까운 손을 결정한다. 4방향 이동이 가능한 격자형 문제이므로 맨해튼 거리를 사용하여 두 손의 거리를 비교하였다. 맨해튼 거리(Manhattan Distance)란? 두 점 사이의 \"직선 거리\"가 아닌 격자 형태로 이동하는 거리를 나타내는 방식이다. 격자형 평면에서 두 점이 있을 때 각 점의 x 좌표와 y 좌표를 이용하여 이동하는 데 드는 최소 거리를 계산하는 방법을 말한다. 두 점 (x1, y1) , (x2, y2)가 있을때 맨해튼 거리는 다음과 같이 계산된다. x1-x2 + y1-y2 소스 코드 3. 문…","fields":{"slug":"/archive/algorithm/6/"},"frontmatter":{"title":"[프로그래머스] 프로그래머스 [카카오 인턴] 키패드 누르기 Java","description":"프로그래머스 [카카오 인턴] 키패드 누르기 Java","date":"2025-05-04","tags":["Algorithm","프로그래머스","코딩테스트"],"series":"프로그래머스","previewImage":"writing.png","isPrivate":false}},{"excerpt":"1. 문제 요약 문제 URL : https://www.acmicpc.net/problem/9095 난이도 : 실버3 문제 내용 :  이 주어졌을 때, 정수 1, 2, 3을 더해서 을 만드는 모든 방법의 수를 구하는 문제이다. 순서가 다른 경우는 다른 방법으로 취급한다. 2. 내 풀이 방법 시도1 접근 방법 DP (Dynamic Programming) 이용하였다. 점화식 계산 방법 n 방법의 개수 1 1 2 1+1, 2 => 2 3 1+1+1, 1+2, 2+1 => 3 4 1+1+1+1, 1+1+2, 1+2+1, 2+1+1, 2+2, 1+3, 3+1 => 7 = 4 + 2 + 1 5 1+1+1+1+1, 1+1+1+2, 1+1+2+1, 1+1+3, 1+2+1+1, 1+2+2, 1+3+1,2+1+1+1, 2+1+2, 2+2+1, 2+3, 3+1+1, 3+2 => 13 = 7 + 4 + 2 소스 코드 3. 문제 회고 🔍 시도 1,2,3을 이용해서 n을 만들어야 한다는 문제의 조건을 보고 …","fields":{"slug":"/archive/algorithm/4/"},"frontmatter":{"title":"[BOJ] 백준 9095 1, 2, 3 더하기 Java","description":"백준 9095 1, 2, 3 더하기 Java","date":"2025-05-02","tags":["Algorithm","백준","코딩테스트"],"series":"백준","previewImage":"writing.png","isPrivate":false}},{"excerpt":"1. 문제 요약 문제 URL : https://www.acmicpc.net/problem/1912 난이도 : 실버2 문제 내용 : 연속된 몇 개의 수를 선택해서 구할 수 있는 합 중 가장 큰 합을 구한다. 단, 수는 한 개 이상 선택해야 한다. 2. 내 풀이 방법 시도1 접근 방법 완전탐색(= 브루트포스)를 이용하였다. 문제점 완전탐색의 시간복잡도는  이다. n = 100,000이라면 O(n²) → 10⁵ * 10⁵ → 100억 × 100억 = 1조 연산을 하게 되며 1초에 약 1억 연산 가능하기 때문에 시간 초과가 발생한다. 소스 코드 시도2 접근 방법 누적합 기법을 이용하였다. 계산 방법 i arr sum max 1 -4 max(-4, 10 + (-4)) = max(-4, 6) = 6 max(10, 6) = 10 2 3 max(3, 6 + 3) = max(3, 9) = 9 max(10, 9) = 10 3 1 max(1, 9 + 1) = 10 max(10, 10) = 10 4 5…","fields":{"slug":"/archive/algorithm/5/"},"frontmatter":{"title":"[BOJ] 백준 1912 연속합 Java","description":"백준 1912 연속합 Java","date":"2025-05-02","tags":["Algorithm","백준","코딩테스트"],"series":"백준","previewImage":"writing.png","isPrivate":false}},{"excerpt":"1. 문제 요약 문제 URL : https://www.acmicpc.net/problem/2805 난이도 : 실버2 문제 내용 : 2. 내 풀이 방법 시도1 접근 방법 이분탐색 방법을 이용하였다. 소스 코드 3. 문제 회고 🔍 시도 문제에 맞는 알고리즘을 생각하지 못하였다. 🛠 해결 과정 문제 유형을 참고하여 이분 탐색 알고리즘을 적용해야 한다는 것을 알게 되었고 이를 기반으로 문제를 해결할 수 있었다. ✅ 잘한 점 ⚠ 개선할 점 이분 탐색 유형 문제를 많이 풀어봐야겠다. 참조","fields":{"slug":"/archive/algorithm/3/"},"frontmatter":{"title":"[BOJ] 백준 2805 나무 자르기 Java","description":"백준 2805 나무 자르기 Java","date":"2025-04-27","tags":["Algorithm","백준","코딩테스트"],"series":"백준","previewImage":"writing.png","isPrivate":false}},{"excerpt":"1. 문제 요약 문제 URL : https://www.acmicpc.net/problem/1012 난이도 : 실버2 문제 내용 : 배추가 심어진 곳끼리 연결되어 있으면 하나의 \"덩어리\"로 보고 총 몇 개의 덩어리가 있는지 세는 문제이다. 2. 내 풀이 방법 시도1 접근 방법 BFS 알고리즘을 이용하였다. 소스 코드 3. 문제 회고 🔍 시도 문제를 읽고 BFS 알고리즘과 4방향 탐색(상하좌우)이 필요하다고 빠르게 판단했다.\n 위치에서만 BFS 탐색을 시도했다. 🛠 해결 과정 만 탐색하면 전체 영역을 탐색하지 못하는 문제를 발견했다.\n이후 배열 전체를 순회하며 방문하지 않은 영역마다 BFS를 수행하는 방식으로 접근을 수정했다. ✅ 잘한 점 문제를 읽자마자 BFS로 해결해야 한다는 판단을 빠르게 내렸다.\nDFS/BFS 문제를 여러 번 풀어본 경험이 도움이 되었다. ⚠ 개선할 점 BFS + 4방향 탐색까진 좋았지만 \"전체 배열을 순회하며 시작점을 찾아야 한다\"는 기본적인 접근을 처음부터 …","fields":{"slug":"/archive/algorithm/1/"},"frontmatter":{"title":"[BOJ] 백준 1012 유기농 배추 Java","description":"백준 1012 유기농 배추 Java","date":"2025-04-26","tags":["Algorithm","백준","코딩테스트"],"series":"백준","previewImage":"writing.png","isPrivate":false}},{"excerpt":"1. 문제 요약 문제 URL : https://www.acmicpc.net/problem/11053 난이도 : 실버2 문제 내용 : 가장 긴 증가하는 부분 수열의 길이를 구하는 문제이다. 2. 내 풀이 방법 시도1 접근 방법 TreeSet에 이용해서 중복제거 + 정렬을 하였다. 문제점 TreeSet에 넣어서 중복제거 + 정렬하고 input.size 를 출력하고 있는데\n이건 서로 다른 수의 개수를 구하는 것이지 문제의 핵심인 가장 긴 증가하는 부분 수열을 구하게 아니다. 소스 코드 시도2 접근 방법 DP 알고리즘을 이용하였다. 소스 코드 3. 문제 회고 🔍 시도 처음에는 TreeSet을 사용해서 정렬과 중복 제거를 통해 문제를 풀려고 했지만 이는 문제의 의도와 맞지 않았다.\n문제 밑에 있는 알고리즘의 분류를 보고 동적 계획법(DP)을 이용해서 풀었다. 🛠 해결 과정 dp[i] = i번째 숫자를 마지막으로 했을 때의 LIS 길이라고 정의하고 i번째 수를 기준으로 0부터 i-1까지 순회…","fields":{"slug":"/archive/algorithm/2/"},"frontmatter":{"title":"[BOJ] 백준 11053 가장 긴 증가하는 부분 수열 Java","description":"백준 11053 가장 긴 증가하는 부분 수열 Java","date":"2025-04-26","tags":["Algorithm","백준","코딩테스트"],"series":"백준","previewImage":"writing.png","isPrivate":false}},{"excerpt":"99클럽 코테 스터디 1. 오늘의 학습 키워드 DFS/BFS 문제 URL : https://www.acmicpc.net/problem/18126 2. 공부한 내용 본인의 언어로 정리하기 시도1(틀림) 접근 방법 인접행렬을 이용해서 가장 먼 거리를 구했으나 틀렸다. 시도2(틀림) 접근 방법 인접 리스트를 이용해서 풀어보았다. 시도3(맞음) 접근 방법 구글링도 해보고 GPT한테도 반례를 찾아보았으나 무엇때문에 틀린지 몰랐으나.. 자료형의 문제였다. 소스코드 3. 오늘의 회고 문제 상황과 시도 \"양방향\"이라는 단어와 가장 먼 거리를 구하는 문제로 판단했다. DFS 또는 BFS를 활용하면 풀 수 있겠다고 생각했고 그 방향으로 접근했다. 해결 과정 문제 자체는 잘 파악했지만 int형 오버플로우는 전혀 예상하지 못했다. long형으로 변경하니 정답이 나와서 허무한 느낌이 들었다. ㅠㅠ 배운 점 문제를 읽고 적절한 알고리즘을 떠올린 점은 잘했다. 하지만 큰 수가 나올 수 있는 경우를 항상 염두…","fields":{"slug":"/archive/study/99클럽코테스터디/17/"},"frontmatter":{"title":"[99클럽 코테 스터디] 99클럽 코테 스터디 17일차 TIL + DFS/BFS","description":"99클럽 코테 스터디 17일차 TIL + DFS/BFS","date":"2025-04-22","tags":["99클럽","코딩테스트준비","개발자취업","항해99","TIL"],"series":"99클럽 코테 스터디","previewImage":"how.png","isPrivate":false}},{"excerpt":"99클럽 코테 스터디 1. 오늘의 학습 키워드 시뮬레이션 문제 URL : https://school.programmers.co.kr/learn/courses/30/lessons/72410 2. 공부한 내용 본인의 언어로 정리하기 시도1(맞음) 접근 방법 문제를 읽고 단계별로 구현을 하였다. 소스 코드 3. 오늘의 회고 문제 상황과 시도 문제를 읽고 단계별로 풀어보면 되겠다고 생각하였다. 해결 과정 문자열 관련 문제라고 생각했는데 풀고 나서 힌트를 보니 시뮬레이션 문제였다. 배운 점 문자열 함수와 정규표현식을 알고있다면 쉽게 풀 수 있는 문제였다.","fields":{"slug":"/archive/study/99클럽코테스터디/16/"},"frontmatter":{"title":"[99클럽 코테 스터디] 99클럽 코테 스터디 16일차 TIL + 시뮬레이션","description":"99클럽 코테 스터디 16일차 TIL + 시뮬레이션","date":"2025-04-21","tags":["99클럽","코딩테스트준비","개발자취업","항해99","TIL"],"series":"99클럽 코테 스터디","previewImage":"how.png","isPrivate":false}},{"excerpt":"99클럽 코테 스터디 1. 오늘의 학습 키워드 동적계획법 문제 URL : https://www.acmicpc.net/problem/17484 2. 공부한 내용 본인의 언어로 정리하기 시도1(맞음) 접근 방법 대문자여부를 체크하여 대문자로 변환 소스 코드 3. 오늘의 회고 문제 상황과 시도 해결 과정 배운 점","fields":{"slug":"/archive/study/99클럽코테스터디/14/"},"frontmatter":{"title":"[99클럽 코테 스터디] 99클럽 코테 스터디 14일차 TIL + 문자열","description":"99클럽 코테 스터디 14일차 TIL + 문자열","date":"2025-04-20","tags":["99클럽","코딩테스트준비","개발자취업","항해99","TIL"],"series":"99클럽 코테 스터디","previewImage":"how.png","isPrivate":true}},{"excerpt":"99클럽 코테 스터디 1. 오늘의 학습 키워드 동적계획법 문제 URL : https://www.acmicpc.net/problem/17271 2. 공부한 내용 본인의 언어로 정리하기 시도1 접근 방법 이 10000 이하의 자연수이니까 완전탐색으로 하면 시간초과가 날 수 있음 n분 동안의 모든 조합을 찾는 방법으로 풀어야겠다고 생각했음 소스 코드 3. 오늘의 회고 문제 상황과 시도 문제를 읽고, 처음에는 n분 동안의 모든 경우의 수를 찾아야겠다고 판단했다. 해결 과정 처음에는 동적 계획법 문제라는 생각을 하지 못하고 접근하였다. 배운 점 최근 여러 문제에서 동적 계획법 유형이 반복해서 등장하고 있지만, 아직 구현에 익숙하지 않다. DP가 가장 취약한 부분이라는 점을 다시금 느꼈고, 보다 집중적으로 연습할 필요가 있음을 깨달았다.","fields":{"slug":"/archive/study/99클럽코테스터디/15/"},"frontmatter":{"title":"[99클럽 코테 스터디] 99클럽 코테 스터디 15일차 TIL + 동적계획법","description":"99클럽 코테 스터디 15일차 TIL + 동적계획법","date":"2025-04-20","tags":["99클럽","코딩테스트준비","개발자취업","항해99","TIL"],"series":"99클럽 코테 스터디","previewImage":"how.png","isPrivate":false}},{"excerpt":"99클럽 코테 스터디 1. 오늘의 학습 키워드 문자열 문제 URL : https://www.acmicpc.net/problem/2156 2. 공부한 내용 본인의 언어로 정리하기 시도1(맞음) 접근 방법 대문자여부를 체크하여 대문자로 변환 소스 코드 3. 오늘의 회고 문제 상황과 시도 오늘의 문제는 쉬어서 별다른 문제가 없었다. 해결 과정 String보다 char타입이 더 속도가 빠르다고 생각이 들어서 char[] 타입으로 변경하였고 문자열 조작시 불변객체인 String을 그대로 사용하는 것보다 StringBuilder를 이용해서 최적화를 하였다. 배운 점","fields":{"slug":"/archive/study/99클럽코테스터디/13/"},"frontmatter":{"title":"[99클럽 코테 스터디] 99클럽 코테 스터디 13일차 TIL + 문자열","description":"99클럽 코테 스터디 13일차 TIL + 문자열","date":"2025-04-16","tags":["99클럽","코딩테스트준비","개발자취업","항해99","TIL"],"series":"99클럽 코테 스터디","previewImage":"how.png","isPrivate":false}},{"excerpt":"99클럽 코테 스터디 1. 오늘의 학습 키워드 동적계획법 문제 URL : https://www.acmicpc.net/problem/2156 2. 공부한 내용 본인의 언어로 정리하기 시도1 접근 방법 배열을 순회하면서 큰 수끼리 더해보며 어떨까? 문제점 연속적으로 포도잔을 마실수 없으므로 문제에 부합하지 않는다. 시도2 접근 방법 모든 경우를 탐색하면서 연속된 3잔을 막는 방식 => 완전탐색 문제점 완전탐색의 최악의 경우 시간복잡도는 O(2^n)으로 보고 n이 20만 넘어도 너무 커진다.  그래서 시간 초과가 발생할 가능성이 높다. 시도3 접근 방법 다이나믹 프로그래밍 알고리즘 Bottom-Up 방식 이용하였다. 소스 코드 3. 오늘의 회고 문제 상황과 시도 문제를 다양한 각도에서 접근해보며 여러 가지 시도를 했고 기본 로직 구성에는 성공했으나 결론적으로 DP를 제대로 구현하지 못했다. 해결 과정 문제를 단순 반복문과 조건문으로 해결하려 했으나 시간 복잡도에서 문제가 발생했다. 이후…","fields":{"slug":"/archive/study/99클럽코테스터디/12/"},"frontmatter":{"title":"[99클럽 코테 스터디] 99클럽 코테 스터디 12일차 TIL + 동적계획법","description":"99클럽 코테 스터디 12일차 TIL + 동적계획법","date":"2025-04-15","tags":["99클럽","코딩테스트준비","개발자취업","항해99","TIL"],"series":"99클럽 코테 스터디","previewImage":"how.png","isPrivate":false}},{"excerpt":"99클럽 코테 스터디 1. 오늘의 학습 키워드 이분탐색 문제 URL : https://www.acmicpc.net/problem/16401 2. 공부한 내용 본인의 언어로 정리하기 시도1 소스 코드 이분 탐색 정렬된 배열이나 리스트에서 원하는 값을 빠르게 찾는 알고리즘를 말한다. 반드시 오름차순(또는 내림차순)으로 정렬되어 있어야 한다. 동작 방식 배열의 중간값을 찾는다. 찾는 값이 중간값보다 작으면 왼쪽, 크면 오른쪽으로 탐색 범위를 줄인다. 범위가 좁아질 때까지 반복한다. 사용되는 상황 효율적으로 검색이 필요할 때 예: 값의 존재 여부, 최댓값/최솟값 구하기, 조건을 만족하는 값 찾기, 나무 자르기, 랜선 자르기, 과자 나눠주기 3. 오늘의 회고 문제 상황과 시도 문제를 보고 어떤 알고리즘을 사용해야 할지 바로 떠오르지 않았다. 완전 탐색으로 접근하면 시간 초과가 날 것 같았고, DFS나 BFS 알고리즘도 적용되지 않을 것 같았다. 해결 과정 힌트를 통해 이분탐색을 사용해야 한…","fields":{"slug":"/archive/study/99클럽코테스터디/11/"},"frontmatter":{"title":"[99클럽 코테 스터디] 99클럽 코테 스터디 11일차 TIL + 이분탐색","description":"99클럽 코테 스터디 11일차 TIL + 이분탐색","date":"2025-04-14","tags":["99클럽","코딩테스트준비","개발자취업","항해99","TIL"],"series":"99클럽 코테 스터디","previewImage":"how.png","isPrivate":false}},{"excerpt":"99클럽 코테 스터디 1. 오늘의 학습 키워드 탐욕법 문제 URL : https://www.acmicpc.net/problem/1783 2. 공부한 내용 본인의 언어로 정리하기 시도1(틀림) 접근 방법 경우의 수를 전부 탐색해서 최대값을 찾아야 하는 문제인가 싶어 DFS 알고리즘을 떠올렸다. 문제점 DFS는 모든 경로를 탐색하므로 이동 횟수가 많아질 경우 시간 초과 발생 가능성이 있다. 이동 경로를 모두 찾는 게 아니라 이동 가능한 칸 수의 최댓값을 구하는 것이므로 DFS는 적절하지 않는다. 시도2(맞음) 접근 방법 이동할 수 있는 규칙이 제한되어 있다. (체스판 위 나이트 이동과 유사) 이동 규칙 중 2칸 위로 1칸 옆으로 이동만 가능하므로 가능한 이동 방식이 총 4가지이다. 문제에서 주어진 조건을 기반으로 그리디하게 분기 처리하였다. 풀이 핵심 세로 길이가 1인 경우: 이동 불가 →  세로 길이가 2인 경우: 이동 가능한 칸이 제한됨 →  세로가 3 이상인 경우 가로가 7 미만…","fields":{"slug":"/archive/study/99클럽코테스터디/10/"},"frontmatter":{"title":"[99클럽 코테 스터디] 99클럽 코테 스터디 10일차 TIL + 탐욕법","description":"99클럽 코테 스터디 10일차 TIL + 탐욕법","date":"2025-04-11","tags":["99클럽","코딩테스트준비","개발자취업","항해99","TIL"],"series":"99클럽 코테 스터디","previewImage":"how.png","isPrivate":false}},{"excerpt":"99클럽 코테 스터디 1. 오늘의 학습 키워드 탐욕법 문제 URL : https://www.acmicpc.net/problem/2437 2. 공부한 내용 본인의 언어로 정리하기 시도1(틀림) 접근 방법 1부터 1000까지 돌면서 가능한 무게를 추로 하나씩 빼본다. 문제점 단순히 무게를 빼면 부분 조합을 체크 할 수 없다. 시도2(맞음) 접근 방법 그리디 알고리즘을 적용해본다. 소스 코드 그리디 알고리즘(Greedy Algorithm) 문제를 해결할 때 가장 최적의 선택을 하는 알고리즘를 말한다. 이 문제에서는 정렬 + 누적합 + 그리디를 이용한 것이지 정렬+누적합 자체가 그리디 알고리즘을 말하는 것이 아니다. 핵심 개념 탐욕적 선택 부분 문제 최적성 장점 계산 속도가 빠르다. 단점 문제에 따라 탐욕적 접근이 실패할 수 있다. 대표적인 문제 동전 거스름돈 회의실 배정 최소 신장 트리 다익스트라 알고리즘 3. 오늘의 회고 문제 상황과 시도 문제를 보고 1부터 1000까지 돌면서 가능한…","fields":{"slug":"/archive/study/99클럽코테스터디/9/"},"frontmatter":{"title":"[99클럽 코테 스터디] 99클럽 코테 스터디 9일차 TIL + 탐욕법","description":"99클럽 코테 스터디 9일차 TIL + 탐욕법","date":"2025-04-10","tags":["99클럽","코딩테스트준비","개발자취업","항해99","TIL"],"series":"99클럽 코테 스터디","previewImage":"how.png","isPrivate":false}},{"excerpt":"99클럽 코테 스터디 1. 오늘의 학습 키워드 정규표현식 문제 URL : https://www.acmicpc.net/problem/9996 2. 공부한 내용 본인의 언어로 정리하기 시도1(틀림) 접근 방법 를 기준으로 나눠서 regex[0]으로 시작하면서 regex[1]로 끝나는지 체크하였다. 문제점 중간에 들어갈 내용까지 포함해서 전체가 일치하는지 확인해야한다. 소스 코드 시도2(맞음) 접근 방법 정규표현식을 이용하였다. 소스 코드 3. 오늘의 회고 문제 상황과 시도 단순히 을 기준으로 앞과 뒤를 나눠 비교하는 방식으로 접근했으나 한 번에 통과하지 못했다. 해결 과정 2번째 시도에 바로 정규표현식을 떠올린 점은 좋았다. 배운 점 정규표현식과 String.matches() 메서드를 활용한 점은 긍정적이었다. 하지만 권장 시간인 30분 내에 문제를 해결하지 못한 것은 아쉬운 부분이다. 다음에는 시간 안에 해결할 수 있도록 더 집중해서 풀어보자.","fields":{"slug":"/archive/study/99클럽코테스터디/8/"},"frontmatter":{"title":"[99클럽 코테 스터디] 99클럽 코테 스터디 8일차 TIL + 정규표현식","description":"99클럽 코테 스터디 8일차 TIL + 정규표현식","date":"2025-04-09","tags":["99클럽","코딩테스트준비","개발자취업","항해99","TIL"],"series":"99클럽 코테 스터디","previewImage":"how.png","isPrivate":false}},{"excerpt":"99클럽 코테 스터디 1. 오늘의 학습 키워드 스택/큐 문제 URL : https://www.acmicpc.net/problem/10799 2. 공부한 내용 본인의 언어로 정리하기 소스 코드 시도1 3. 오늘의 회고 문제 상황과 시도 문제를 처음 보고 가 생길 때마다 개수를 세면 될 것 같다고 생각했지만 결과가 맞지 않았다.\n괄호의 모양과 위치에 따라 쇠막대기의 잘림 횟수를 정확히 계산해야 하는 문제였기 때문이다.\n괄호가 생길 때마다 단순히 카운트하는 방식으로는 레이저인지 막대기의 끝인지 구분할 수 없어서 올바른 풀이 방법이 될 수 없었다. 해결 과정 다양한 접근 방식을 검색해보며 스택을 활용한 풀이를 참고했다. 배운 점 힌트를 보지 않고 문제를 읽고 스택을 떠올린 점은 좋았다. 다만 문제를 더 꼼꼼히 읽고 조건을 정확히 파악한 후에 접근하는 연습이 필요하다고 느꼈다.\n앞으로 다양한 문제를 접하며 사고력을 더 키워야겠다.","fields":{"slug":"/archive/study/99클럽코테스터디/7/"},"frontmatter":{"title":"[99클럽 코테 스터디] 99클럽 코테 스터디 7일차 TIL + 스택/큐","description":"99클럽 코테 스터디 7일차 TIL + 스택/큐","date":"2025-04-08","tags":["99클럽","코딩테스트준비","개발자취업","항해99","TIL"],"series":"99클럽 코테 스터디","previewImage":"how.png","isPrivate":false}},{"excerpt":"99클럽 코테 스터디 1. 오늘의 학습 키워드 DFS/BFS 문제 URL : https://www.acmicpc.net/problem/4963 2. 공부한 내용 본인의 언어로 정리하기 소스 코드 시도1 3. 오늘의 회고 문제 상황과 시도 이전에 DFS 알고리즘 문제를 풀어본 경험이 있었지만 이번 문제 풀이에서는 제대로 적용하지 못했다. 해결 과정 검색을 통해 다양한 접근 방식을 참고했다. 배운 점 DFS/BFS 알고리즘에 대한 이해를 높이기 위해 더 많은 문제를 풀어봐야겠다.","fields":{"slug":"/archive/study/99클럽코테스터디/6/"},"frontmatter":{"title":"[99클럽 코테 스터디] 99클럽 코테 스터디 6일차 TIL + DFS/BFS","description":"99클럽 코테 스터디 6일차 TIL + DFS/BFS","date":"2025-04-07","tags":["99클럽","코딩테스트준비","개발자취업","항해99","TIL"],"series":"99클럽 코테 스터디","previewImage":"how.png","isPrivate":false}},{"excerpt":"99클럽 코테 스터디 1. 오늘의 학습 키워드 투포인터 문제 URL : https://www.acmicpc.net/problem/2559 2. 공부한 내용 본인의 언어로 정리하기 투포인터 정렬된 배열이나 리스트에서 두 개의 포인터를 사용하여 문제를 해결하는 방법을 말한다. 주로 연속된 부분 배열, 구간 합, 정렬된 배열에서 특정 조건을 만족하는 쌍 찾기 등에 사용된다. 소스 코드 시도1 3. 오늘의 회고 문제 상황과 시도 초반에 문제를 잘못 이해하여 연속적인 구간의 합을 구해야 했는데 특정 인덱스끼리의 합을 구하는 방식으로 풀었다. 해결 과정 생각한대로 쉽게 구현이 되었다. 배운 점 처음에는 단순한 시뮬레이션 문제라고 생각했지만 힌트를 보고 투 포인터 알고리즘이 활용된다는 것을 알게 되었다.\n문제의 특성을 정확히 파악하는 것이 중요하다는 점을 다시 한번 느꼈다.","fields":{"slug":"/archive/study/99클럽코테스터디/5/"},"frontmatter":{"title":"[99클럽 코테 스터디] 99클럽 코테 스터디 5일차 TIL + 투포인터","description":"99클럽 코테 스터디 5일차 TIL + 투포인터","date":"2025-04-04","tags":["99클럽","코딩테스트준비","개발자취업","항해99","TIL"],"series":"99클럽 코테 스터디","previewImage":"how.png","isPrivate":false}},{"excerpt":"99클럽 코테 스터디 1. 오늘의 학습 키워드 DFS/BFS 문제 URL : https://www.acmicpc.net/problem/2468 2. 공부한 내용 본인의 언어로 정리하기 DFS(깊이 우선 탐색, Depth-First Search) 그래프를 탐색할 때 한 방향으로 갈 수 있을 만큼 깊이 들어가고 더 이상 갈 곳이 없으면 뒤로 돌아와 다른 경로를 탐색하는 방식이다. 스택(Stack) 또는 재귀를 사용해서 구현한다. 사용 사례: 백트래킹, 퍼즐(미로 찾기, 체스 나이트 이동 등), 위상 정렬 BFS(너비 우선 탐색, Breadth-First Search) 그래프를 탐색할 때 가까운 노드부터 차례대로 방문하는 방식이다. 큐(Queue)를 이용해 구현한다. 사용 사례: 최단 경로 찾기(미로, GPS), 네트워크 탐색, 웹 크롤링 소스 코드 시도1 3. 오늘의 회고 문제 상황과 시도 문제를 이해하는 것조차 쉽지 않았다. 특히 물에 잠기지 않는 높이가 왜 존재하지 않는지 의문이 …","fields":{"slug":"/archive/study/99클럽코테스터디/4/"},"frontmatter":{"title":"[99클럽 코테 스터디] 99클럽 코테 스터디 4일차 TIL + DFS/BFS","description":"99클럽 코테 스터디 4일차 TIL + DFS/BFS","date":"2025-04-03","tags":["99클럽","코딩테스트준비","개발자취업","항해99","TIL"],"series":"99클럽 코테 스터디","previewImage":"how.png","isPrivate":false}},{"excerpt":"99클럽 코테 스터디 1. 오늘의 학습 키워드 시뮬레이션 문제 URL : https://school.programmers.co.kr/learn/courses/30/lessons/161990 2. 공부한 내용 본인의 언어로 정리하기 시뮬레이션 문제에서 주어진 조건을 그대로 구현하여 해결하는 방법을 말한다. 보통 격자 이동, 회전 같은 문제에서 많이 사용된다. 소스 코드 시도1 3. 오늘의 회고 문제 상황과 시도 문제를 읽고 최단 거리를 구해야 한다고 판단하여 DFS나 BFS 알고리즘을 고려했다.\n그러나 검색을 통해 이러한 접근이 필요하지 않다는 것을 알게 되었다. 해결 과정 머릿속에 떠오르는 방식대로 2차원 배열을 만들어 필요한 변수들을 계산하며 문제를 해결했다. 배운 점 지문에서 요구하는 사항을 정확하게 파악하는 습관을 기르자.","fields":{"slug":"/archive/study/99클럽코테스터디/3/"},"frontmatter":{"title":"[99클럽 코테 스터디] 99클럽 코테 스터디 3일차 TIL + 시뮬레이션","description":"99클럽 코테 스터디 3일차 TIL + 시뮬레이션","date":"2025-04-02","tags":["99클럽","코딩테스트준비","개발자취업","항해99","TIL"],"series":"99클럽 코테 스터디","previewImage":"how.png","isPrivate":false}},{"excerpt":"99클럽 코테 스터디 1. 오늘의 학습 키워드 동적계획법 문제 URL : https://www.acmicpc.net/problem/14495 2. 공부한 내용 본인의 언어로 정리하기 동적계획법(Dynamic Programming, DP) 복잡한 문제를 작은 부분 문제로 나누어 해결한 후 그 결과를 저장하여 동일한 계산을 반복하지 않도록 하는 최적화 기법을 말한다. 구현 방법 Top-Down (메모이제이션, Memoization) 재귀를 사용하여 해결한다. 이미 계산한 값을 저장하고 필요할 때 다시 사용한다. Bottom-Up (타뷸레이션, Tabulation) 작은 문제부터 해결하여 큰 문제를 해결한다. 반복문을 사용하여 점진적으로 결과를 계산한다. 소스 코드 시도1 : int형 -> long형으로 변경 시도2 : long형 -> BigInteger 타입으로 변경 시도3 3. 오늘의 회고 문제 상황과 시도 처음에는 int형을 사용해 제출했지만 틀렸다는 결과가 나왔다. n의 최대값인…","fields":{"slug":"/archive/study/99클럽코테스터디/2/"},"frontmatter":{"title":"[99클럽 코테 스터디] 99클럽 코테 스터디 2일차 TIL + 동적계획법","description":"99클럽 코테 스터디 2일차 TIL + 동적계획법","date":"2025-04-01","tags":["99클럽","코딩테스트준비","개발자취업","항해99","TIL"],"series":"99클럽 코테 스터디","previewImage":"how.png","isPrivate":false}},{"excerpt":"99클럽 코테 스터디 1. 오늘의 학습 키워드 에라토스테네스의 체 문제 URL : https://www.acmicpc.net/problem/1929 2. 공부한 내용 본인의 언어로 정리하기 소수 1과 자기 자신만을 약수로 가지는 수를 말한다. 0, 1은 소수가 아니다. 소수를 찾는 방법 소인수 분해를 이용하는 방법 에라토스테네스의 체를 이용하는 방법 에라토스테네스의 체 소수를 빠르게 찾는 알고리즘을 말한다. 시간 복잡도가 줄어들게 된다. 원리 소수를 구하고자 하는 범위만큼 배열을 할당한다. 처음 모든 숫자를 소수라고 가정하기 위해서 true로 초기화한다. 2부터 시작해서 특정 수의 배수에 해당하는 수를 모두 지운다.(지울 때 자기자신은 지우지 않고 이미 지워진 수는 건너뛴다.) 2부터 시작하여 남아있는 수를 모두 출력한다. 소스 코드 3. 오늘의 회고 소수의 개념이 기억나지 않아 개념을 찾아보고 코드를 작성해보았다. 처음 시도한 방법은 M과 N 사이의 모든 수를 반복문을 돌면서 소…","fields":{"slug":"/archive/study/99클럽코테스터디/1/"},"frontmatter":{"title":"[99클럽 코테 스터디] 99클럽 코테 스터디 1일차 TIL + 에라토스테네스의 체 ","description":"99클럽 코테 스터디 1일차 TIL","date":"2025-03-31","tags":["99클럽","코딩테스트준비","개발자취업","항해99","TIL"],"series":"99클럽 코테 스터디","previewImage":"how.png","isPrivate":false}},{"excerpt":"1. String클래스란? String 클래스는 자바에서 문자열을 다루기 위해 제공하는 클래스입니다. 자바에서 가장 많이 사용되는 클래스 중 하나죠. 문자열을 다루기 위해 기본형인 char 타입을 사용할 수도 있지만, 이 방법은 불편하기 때문에 자바에서는 문자열을 보다 편리하게 처리할 수 있도록 String 클래스를 제공합니다. String 클래스의 주요 특징 중 하나는 불변(Immutable) 객체라는 점입니다. 불변 객체란 값을 변경할 수 없는 객체를 의미하며, String 클래스는 내부적으로 문자열 데이터를 수정할 수 없게 설계되어 있습니다.  위 이미지에서 볼 수 있듯이 value라는 변수는 실제로 String 클래스에서 문자열 데이터를 담는 역할을 합니다. 이 변수는 final로 선언되어 있어 값 변경이 불가능합니다. String 클래스의 소스 코드를 통해 이 구조를 좀 더 자세히 알아보겠습니다. 자바 9 이전에는 char 배열을 이용해 문자열 데이터를 저장했지만, 자바 …","fields":{"slug":"/archive/java/2/"},"frontmatter":{"title":"[Java] String 클래스","description":"String 클래스","date":"2024-11-10","tags":["Java","Study"],"series":"Java","previewImage":"java_logo.png","isPrivate":false}},{"excerpt":"if(kakao) 는 카카오 그룹의 기술 비전을 공개하고 기술적 성과를 소개하는 대표 개발자 컨퍼런스입니다. 매년 참여를 희망하며 신청했지만 올해 처음으로 당첨되는 행운을 얻어 마지막 날 행사에 참석할 수 있었습니다. 0. 셔틀버스 & 굿즈 오전 8시 20분까지 양재역에 도착해 셔틀버스를 타고 행사장으로 이동했습니다. 버스에 타자마자 굿즈를 나눠주셔서 기분 좋게 시작할 수 있었습니다.  이번 행사는 경기도 용인에 위치한 카카오 AI 캠퍼스에서 진행되었는데요. 날씨도 좋고 캠퍼스 건물 역시 인상적이었습니다. 곳곳에 비치된 물, 음료, 견과류 등 간식 덕분에 행사 내내 편하게 즐길 수 있었던 점도 만족스러웠습니다.  1. Panel Talk 오전 10시 오프닝 세션이 시작되었습니다. 이 시간에는 카카오 계열사들이 AI 기술을 어떻게 활용하고 있는지 구체적으로 소개했는데요. 특히 카카오페이와 카카오뱅크가 이상 거래 탐지 시스템(FDS)에 AI를 적용하고 있다는 점이 인상 깊었습니다.  …","fields":{"slug":"/archive/review/1/"},"frontmatter":{"title":"[후기] if(kakao) 2024","description":"if(kakaoAI) 2024 후기","date":"2024-10-25","tags":["컨퍼런스"],"series":"","previewImage":"oop.png","isPrivate":false}},{"excerpt":"스터디에서 다형적참조에 대해 발표하게 되어 정리해보고자 합니다. 0. 서론 다형적 참조에 대해 설명하기 전에 먼저 다형성(Polymorphism)에 대해 알아보죠. 다형성(Polymorphism)은 객체지향 프로그래밍의 중요한 개념중 하나로 여러가지 형태를 가질 수 있는 능력을 의미합니다. 예시를 들자면, 다형성(Polymorphism)은 부모 클래스 타입의 변수가 자식 클래스 타입의 객체를 참조할 수 있다는 것을 뜻합니다. 1. 다형적 참조란? 다시 돌아와서 다형적 참조(Polymorphic Reference)에 대해 알아보죠. 다형적 참조(Polymorphic Reference)는 부모 클래스 타입의 인스턴스로 자식 클래스 타입의 인스턴스를 참조 할 수 있는 기능을 의미합니다. 이는 다형성을 실현하는 방법 중 하나입니다. 다형성과 비슷하다고 생각할 수 있지만 다형성과 다형적 참조는 보시다싶이 서로 다른 개념입니다.\n다형성이 더 포괄적인 개념이죠.\n 2. 예제코드 Animal 클…","fields":{"slug":"/archive/java/1/"},"frontmatter":{"title":"[Java] 다형적 참조","description":"다형적 참조","date":"2024-09-28","tags":["Java","Study"],"series":"Java","previewImage":"java_logo.png","isPrivate":false}},{"excerpt":"0. 서론 최근 면접을 보러 다니면서  Git 브랜치 전략에 대해 설명해 달라는 기술 질문을 공통적으로 받게 되었습니다. 사실 Git으로 소스 commit만 했지, 깊이있게 공부 하지 않았기 때문에 해당 질문에 대답 할 수 없었습니다. 따라서, Git 브랜치 전략에 대해 정리해보고자 합니다. 1. Git 브랜치 전략이란? Git은 브랜치라는 것을 사용하는데요. 브랜치는 특정 시점 스냅샷 같은 개념이라고 생각하시면 됩니다. 브랜치를 사용하면 한 프로젝트에서 서로 여러 작업을 동시에 수행하면서도, 작업간의 영향을 최소화 할 수 있습니다. 이런 Git의 브랜치를 관리하는 전략을 Git 브랜치 전략이라고 말합니다. 2. Git 브랜치 전략 사용 목적 그렇다면 Git 브랜치 전략을 사용하는 목적이 뭘까요? Git 브랜치 전략을 사용하는 목적에는 여러가지가 있지만 문제가 생겼을 때 빠르게 복구하기 위해서라고 생각합니다. 앞서 설명한 것처럼 브랜치를 사용하면 여러 가지 작업을 동시에 안전하게 …","fields":{"slug":"/archive/tech/1/"},"frontmatter":{"title":"[기술면접] Git 브랜치 전략","description":"Git 브랜치 전략","date":"2024-09-04","tags":["Tech","Git"],"series":"기술면접","previewImage":"writing-help.png","isPrivate":false}},{"excerpt":"1. 현상 A팝업 -> B팝업 -> C팝업으로 호출하는 경우 B팝업에서만 팝업 호출 시 해당 화면이 reload 되는 현상이 발생했다. 2. 원인 form 태그 안에  button 태그가 1개만 있는 경우에 onclick() 이벤트와 동시에 submit()도 같이 동작된다. 그래서 발생한 오류였다. 3. 해결 방법1) 방법2) 이런 방법 말고도 검색해보면 다른 방법이 많이 있지만 나의 경우에는 이 2가지 방법으로 했을 때 오류가 발생하지 않았다. button 태그에 대해서 좀 더 알아보다가 재미난 글을 발견하였다. 👉🏻버튼에 타입을 쓰는 이유 (button type='button') 참조 https://nykim.work/96","fields":{"slug":"/error/2/"},"frontmatter":{"title":"[오류] 팝업 여러개 띄울때 화면 reload 발생","description":"팝업 여러개 띄울때 화면 reload 발생","date":"2024-08-25","tags":["Error","Web"],"series":"오류 모음집","previewImage":"how.png","isPrivate":false}},{"excerpt":"1. 현상  메소드를 이용해서 js를 분기처리 하는데 SSL 적용이 된 운영서버에서 http 리소스가 로드되어서 에러가 발생하였다. 2. 원인 web서버에서 was서버를 호출할때는 http 통신이기 때문에 isSecure() 메소드에서 false가 나온 것이다. 3. 해결 방법1) 방법2) 위와 같이 2가지 방법이 있는데 처음에는 x-forwarded-proto를 이용해서 하였으나 로드밸런서가 없는 로컬과 개발에서는 null로 나와서 방법 2로 변경하였다. x-forwarded-proto 클라이언트가 로드밸런서에 접속할 때 사용한 프토토콜을 식별하는 표준 헤더 참조 https://zetawiki.com/wiki/X-Forwarded-Proto","fields":{"slug":"/error/3/"},"frontmatter":{"title":"[오류] https 도메인인데 request.isSecure() return false인 경우","description":"https 도메인인데 request.isSecure() return false인 경우","date":"2024-08-25","tags":["Error","Web"],"series":"오류 모음집","previewImage":"how.png","isPrivate":false}},{"excerpt":"1. 현상 2. 원인 3. 해결 참조","fields":{"slug":"/sample/test/"},"frontmatter":{"title":"test","description":"tet","date":"2024-08-25","tags":["Error","Web"],"series":"오류 모음집","previewImage":"java_logo.png","isPrivate":true}},{"excerpt":"환경설정 개발툴 : InteliJ Spring Boot : 2.7.14 Hibernate : 5.6.15 Java : 11 Gradle SpringBoot 검색을 해보면 application.properties 파일에 이 내용을 추가하면 파라미터 바인딩이 출력된다고 하는데, 저의 경우에는 그렇게 해도 나오지 않았습니다. 이 글을 참고하여 하니 원하는 결과가 나왔습니다. 👉🏻hibernate 의 완성된(?) 쿼리를 확인 하는 방법 문의 드립니다 1. bulid.gradle 파일에 추가 2. logback.xml 파일 추가  폴더 밑에  파일을 만들어줍니다. 3. 실행 결과 파라미터가 같이 나오는 것을 확인 할 수 있습니다.\n 참조 https://www.inflearn.com/questions/59014/hibernate-%EC%9D%98-%EC%99%84%EC%84%B1%EB%90%9C-%EC%BF%BC%EB%A6%AC%EB%A5%BC-%ED%99%95%EC%9D%B8-%ED%95%9…","fields":{"slug":"/archive/jpa/1/"},"frontmatter":{"title":"[JPA] Hibernate 쿼리 파라미터 바인딩 출력","description":"Hibernate 쿼리 파라미터 바인딩 출력","date":"2024-08-25","tags":["JPA","Hibernate"],"series":"JPA","previewImage":"jpa.png","isPrivate":false}},{"excerpt":"환경설정 개발툴 : InteliJ Spring Boot : 2.7.14 Quartz : 2.3.2 Java : 11 Gradle SpringBoot Spring Boot에서 Quartz 연동 하는 예제를 소개합니다. 1. bulid.gradle 파일에 추가 2. @Scheduled 어노테이션을 이용 스케쥴러를 적용할 메소드에  어노테이션을 사용합니다. 이 붙은 파일에  어노테이션를 추가합니다. 추가 하지 않으면 스케쥴러가 실행되지 않습니다. @EnableScheduling 스케쥴러를 기능을 켜는 역할을 하며, @Scheduled 어노테이션을 찾아서 실행을 시킨다. 3. 실행 결과 5초마다 실행 된것을 확인 할 수 있습니다.\n 참조 https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/scheduling/annotation/EnableScheduling.html","fields":{"slug":"/archive/spring/1/"},"frontmatter":{"title":"[Spring Boot] Quartz 연동 예제","description":"Spring Boot Quartz 연동 예제","date":"2024-08-25","tags":["Srping Boot","Quartz"],"series":"Spring Boot","previewImage":"springboot_logo.png","isPrivate":false}},{"excerpt":"1. 현상 개발서버 https 적용으로 아래와 같이 http 요청 블락 에러가 발생하였다. 그래서 아래의 메타 태그를 추가해 줬다.  하지만 개발서버 https 적용을 해제하면서부터 화면 접속시 자동으로  로 붙어서 js, css를 읽는 경우가 발생하였다. 2. 원인 https때문에 추가했던 메타 태그의 문제로, content-security-policy를 설정할 경우 자동으로 https로 호출해 주는 것이었다.  3. 해결 해당 태그를 주석처리 하면 현상은 해결되지만, 개발서버에 https 적용 시 http 요청 블락 에러를 이 방법 말고 다른 방법으로 해야 될 것 같다. 로컬은 http인데 개발서버는 https인 경우에는 이 메타태그를 사용하는 것은 좋은 방법이 아닌 것 같다. 참조 https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/upgrade-insecure-requests","fields":{"slug":"/error/1/"},"frontmatter":{"title":"[오류] 자동으로 도메인에 https가 붙는 경우","description":"자동으로 도메인에 https가 붙는 경우","date":"2024-08-23","tags":["Error","Web"],"series":"오류 모음집","previewImage":"how.png","isPrivate":false}},{"excerpt":"Default Private Posts This is a default private post. It's recommended not to delete this posts 😵 (현재 이 포스트는 삭제하지 말아주세요.)","fields":{"slug":"/default/private-default/"},"frontmatter":{"title":"Default Private","description":null,"date":"2024-01-01","tags":["private-tag"],"series":null,"previewImage":"banned.png","isPrivate":true}},{"excerpt":"환경설정 개발툴 : 이클립스 Spring : 4.3.3 Quartz : 2.3.0 Tomcat : 8.5 Java : 8 서버 :CentOS 1. 현상 개발서버에서 톰캣 프로세스가 여러개가 뜨면서 메모리 너무 많이 잡아먹는 현상이 발생하였다.\nnetstate -tnlp 하면 8080포트는 하나만 나오고, ps -ef | grep tomcat 하면 여러개 나왔다. 2. 원인 검색을 하다가 아래의 글을 보고 quartz 스케쥴러의 문제라고 생각이 들었다.\n톰캣 서버가 종료되어도 이미 실행된 job 스레드는 종료되지 않고 계속 남는다. 👉🏻톰켓 프로세스 종료 이슈 3. 해결 destroy-method 속성을 이용해서 SchedulerFactoryBean 클래스에 있는 destroy() 메소드를 추가해줬다. + 추가(2023.10.13) 위 방법으로 적용 후에도 계속 발생하여 젠킨스 배포시 실행중인 톰캣 프로세스 모두 종료시키는 쉘 스크립트를 추가하였다. 참조 https://docs.spr…","fields":{"slug":"/error/4/"},"frontmatter":{"title":"[오류] 톰캣 프로세스 여러개 뜨는 경우","description":"톰캣 프로세스 여러개 뜨는 경우","date":"2023-08-12","tags":["Error","Tomcat"],"series":"오류 모음집","previewImage":"how.png","isPrivate":false}},{"excerpt":"💡 현 포스트는 about 페이지에서도 조회 가능합니다. 포스트를 삭제하지 말고, 이 곳에다 본인만의 멋진 소개 글을 작성해주세요.","fields":{"slug":"/default/about/"},"frontmatter":{"title":"Gatsby Starter Haon 저자에 대해 소개합니다.","description":null,"date":"2022-01-01","tags":["about"],"series":null,"previewImage":null,"isPrivate":true}}],"group":[{"fieldValue":"","totalCount":1,"nodes":[{"frontmatter":{"date":"2024-10-25"}}]},{"fieldValue":"99클럽 코테 스터디","totalCount":17,"nodes":[{"frontmatter":{"date":"2025-04-22"}},{"frontmatter":{"date":"2025-04-21"}},{"frontmatter":{"date":"2025-04-20"}},{"frontmatter":{"date":"2025-04-20"}},{"frontmatter":{"date":"2025-04-16"}},{"frontmatter":{"date":"2025-04-15"}},{"frontmatter":{"date":"2025-04-14"}},{"frontmatter":{"date":"2025-04-11"}},{"frontmatter":{"date":"2025-04-10"}},{"frontmatter":{"date":"2025-04-09"}},{"frontmatter":{"date":"2025-04-08"}},{"frontmatter":{"date":"2025-04-07"}},{"frontmatter":{"date":"2025-04-04"}},{"frontmatter":{"date":"2025-04-03"}},{"frontmatter":{"date":"2025-04-02"}},{"frontmatter":{"date":"2025-04-01"}},{"frontmatter":{"date":"2025-03-31"}}]},{"fieldValue":"JPA","totalCount":1,"nodes":[{"frontmatter":{"date":"2024-08-25"}}]},{"fieldValue":"Java","totalCount":2,"nodes":[{"frontmatter":{"date":"2024-11-10"}},{"frontmatter":{"date":"2024-09-28"}}]},{"fieldValue":"Spring Boot","totalCount":1,"nodes":[{"frontmatter":{"date":"2024-08-25"}}]},{"fieldValue":"기술면접","totalCount":1,"nodes":[{"frontmatter":{"date":"2024-09-04"}}]},{"fieldValue":"백준","totalCount":13,"nodes":[{"frontmatter":{"date":"2025-07-12"}},{"frontmatter":{"date":"2025-07-09"}},{"frontmatter":{"date":"2025-07-05"}},{"frontmatter":{"date":"2025-06-23"}},{"frontmatter":{"date":"2025-06-21"}},{"frontmatter":{"date":"2025-06-14"}},{"frontmatter":{"date":"2025-06-12"}},{"frontmatter":{"date":"2025-05-07"}},{"frontmatter":{"date":"2025-05-02"}},{"frontmatter":{"date":"2025-05-02"}},{"frontmatter":{"date":"2025-04-27"}},{"frontmatter":{"date":"2025-04-26"}},{"frontmatter":{"date":"2025-04-26"}}]},{"fieldValue":"오류 모음집","totalCount":5,"nodes":[{"frontmatter":{"date":"2024-08-25"}},{"frontmatter":{"date":"2024-08-25"}},{"frontmatter":{"date":"2024-08-25"}},{"frontmatter":{"date":"2024-08-23"}},{"frontmatter":{"date":"2023-08-12"}}]},{"fieldValue":"프로그래머스","totalCount":18,"nodes":[{"frontmatter":{"date":"2025-06-13"}},{"frontmatter":{"date":"2025-06-11"}},{"frontmatter":{"date":"2025-06-10"}},{"frontmatter":{"date":"2025-06-09"}},{"frontmatter":{"date":"2025-06-07"}},{"frontmatter":{"date":"2025-06-05"}},{"frontmatter":{"date":"2025-06-04"}},{"frontmatter":{"date":"2025-06-03"}},{"frontmatter":{"date":"2025-05-31"}},{"frontmatter":{"date":"2025-05-28"}},{"frontmatter":{"date":"2025-05-27"}},{"frontmatter":{"date":"2025-05-26"}},{"frontmatter":{"date":"2025-05-25"}},{"frontmatter":{"date":"2025-05-24"}},{"frontmatter":{"date":"2025-05-23"}},{"frontmatter":{"date":"2025-05-20"}},{"frontmatter":{"date":"2025-05-19"}},{"frontmatter":{"date":"2025-05-04"}}]}]}},"pageContext":{}},"staticQueryHashes":[],"slicesMap":{}}