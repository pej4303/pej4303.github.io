{"componentChunkName":"component---src-pages-series-jsx","path":"/series/","result":{"data":{"site":{"siteMetadata":{"title":"보통사람","description":"Dev Note","author":"pej4303","siteUrl":"https://pej4303.github.io","keywords":["java","backend","blog"]}},"allMarkdownRemark":{"nodes":[{"excerpt":"99클럽 코테 스터디 1. 오늘의 학습 키워드 이분탐색 문제 URL : https://www.acmicpc.net/problem/16401 2. 공부한 내용 본인의 언어로 정리하기 시도1 소스 코드 이분 탐색 정렬된 배열이나 리스트에서 원하는 값을 빠르게 찾는 알고리즘를 말한다. 반드시 오름차순(또는 내림차순)으로 정렬되어 있어야 한다. 동작 방식 배열의 중간값을 찾는다. 찾는 값이 중간값보다 작으면 왼쪽, 크면 오른쪽으로 탐색 범위를 줄인다. 범위가 좁아질 때까지 반복한다. 사용되는 상황 효율적으로 검색이 필요할 때 예: 값의 존재 여부, 최댓값/최솟값 구하기, 조건을 만족하는 값 찾기, 나무 자르기, 랜선 자르기, 과자 나눠주기 3. 오늘의 회고 문제 상황과 시도 문제를 보고 어떤 알고리즘을 사용해야 할지 바로 떠오르지 않았다. 완전 탐색으로 접근하면 시간 초과가 날 것 같았고, DFS나 BFS 알고리즘도 적용되지 않을 것 같았다. 해결 과정 힌트를 통해 이분탐색을 사용해야 한…","fields":{"slug":"/archive/study/99클럽코테스터디/11/"},"frontmatter":{"title":"[99클럽 코테 스터디] 99클럽 코테 스터디 11일차 TIL + 이분탐색","description":"99클럽 코테 스터디 11일차 TIL + 이분탐색","date":"2025-04-14","tags":["99클럽","코딩테스트준비","개발자취업","항해99","TIL"],"series":"99클럽 코테 스터디","previewImage":"how.png","isPrivate":false}},{"excerpt":"99클럽 코테 스터디 1. 오늘의 학습 키워드 탐욕법 문제 URL : https://www.acmicpc.net/problem/1783 2. 공부한 내용 본인의 언어로 정리하기 시도1(틀림) 접근 방법 경우의 수를 전부 탐색해서 최대값을 찾아야 하는 문제인가 싶어 DFS 알고리즘을 떠올렸다. 문제점 DFS는 모든 경로를 탐색하므로 이동 횟수가 많아질 경우 시간 초과 발생 가능성이 있다. 이동 경로를 모두 찾는 게 아니라 이동 가능한 칸 수의 최댓값을 구하는 것이므로 DFS는 적절하지 않는다. 시도2(맞음) 접근 방법 이동할 수 있는 규칙이 제한되어 있다. (체스판 위 나이트 이동과 유사) 이동 규칙 중 2칸 위로 1칸 옆으로 이동만 가능하므로 가능한 이동 방식이 총 4가지이다. 문제에서 주어진 조건을 기반으로 그리디하게 분기 처리하였다. 풀이 핵심 세로 길이가 1인 경우: 이동 불가 →  세로 길이가 2인 경우: 이동 가능한 칸이 제한됨 →  세로가 3 이상인 경우 가로가 7 미만…","fields":{"slug":"/archive/study/99클럽코테스터디/10/"},"frontmatter":{"title":"[99클럽 코테 스터디] 99클럽 코테 스터디 10일차 TIL + 탐욕법","description":"99클럽 코테 스터디 10일차 TIL + 탐욕법","date":"2025-04-11","tags":["99클럽","코딩테스트준비","개발자취업","항해99","TIL"],"series":"99클럽 코테 스터디","previewImage":"how.png","isPrivate":false}},{"excerpt":"99클럽 코테 스터디 1. 오늘의 학습 키워드 탐욕법 문제 URL : https://www.acmicpc.net/problem/2437 2. 공부한 내용 본인의 언어로 정리하기 시도1(틀림) 접근 방법 1부터 1000까지 돌면서 가능한 무게를 추로 하나씩 빼본다. 문제점 단순히 무게를 빼면 부분 조합을 체크 할 수 없다. 시도2(맞음) 접근 방법 그리디 알고리즘을 적용해본다. 소스 코드 그리디 알고리즘(Greedy Algorithm) 문제를 해결할 때 가장 최적의 선택을 하는 알고리즘를 말한다. 이 문제에서는 정렬 + 누적합 + 그리디를 이용한 것이지 정렬+누적합 자체가 그리디 알고리즘을 말하는 것이 아니다. 핵심 개념 탐욕적 선택 부분 문제 최적성 장점 계산 속도가 빠르다. 단점 문제에 따라 탐욕적 접근이 실패할 수 있다. 대표적인 문제 동전 거스름돈 회의실 배정 최소 신장 트리 다익스트라 알고리즘 3. 오늘의 회고 문제 상황과 시도 문제를 보고 1부터 1000까지 돌면서 가능한…","fields":{"slug":"/archive/study/99클럽코테스터디/9/"},"frontmatter":{"title":"[99클럽 코테 스터디] 99클럽 코테 스터디 9일차 TIL + 탐욕법","description":"99클럽 코테 스터디 9일차 TIL + 탐욕법","date":"2025-04-10","tags":["99클럽","코딩테스트준비","개발자취업","항해99","TIL"],"series":"99클럽 코테 스터디","previewImage":"how.png","isPrivate":false}},{"excerpt":"99클럽 코테 스터디 1. 오늘의 학습 키워드 정규표현식 문제 URL : https://www.acmicpc.net/problem/9996 2. 공부한 내용 본인의 언어로 정리하기 시도1(틀림) 접근 방법 를 기준으로 나눠서 regex[0]으로 시작하면서 regex[1]로 끝나는지 체크하였다. 문제점 중간에 들어갈 내용까지 포함해서 전체가 일치하는지 확인해야한다. 소스 코드 시도2(맞음) 접근 방법 정규표현식을 이용하였다. 소스 코드 3. 오늘의 회고 문제 상황과 시도 단순히 을 기준으로 앞과 뒤를 나눠 비교하는 방식으로 접근했으나 한 번에 통과하지 못했다. 해결 과정 2번째 시도에 바로 정규표현식을 떠올린 점은 좋았다. 배운 점 정규표현식과 String.matches() 메서드를 활용한 점은 긍정적이었다. 하지만 권장 시간인 30분 내에 문제를 해결하지 못한 것은 아쉬운 부분이다. 다음에는 시간 안에 해결할 수 있도록 더 집중해서 풀어보자.","fields":{"slug":"/archive/study/99클럽코테스터디/8/"},"frontmatter":{"title":"[99클럽 코테 스터디] 99클럽 코테 스터디 8일차 TIL + 정규표현식","description":"99클럽 코테 스터디 8일차 TIL + 정규표현식","date":"2025-04-09","tags":["99클럽","코딩테스트준비","개발자취업","항해99","TIL"],"series":"99클럽 코테 스터디","previewImage":"how.png","isPrivate":false}},{"excerpt":"99클럽 코테 스터디 1. 오늘의 학습 키워드 스택/큐 문제 URL : https://www.acmicpc.net/problem/10799 2. 공부한 내용 본인의 언어로 정리하기 소스 코드 시도1 3. 오늘의 회고 문제 상황과 시도 문제를 처음 보고 가 생길 때마다 개수를 세면 될 것 같다고 생각했지만 결과가 맞지 않았다.\n괄호의 모양과 위치에 따라 쇠막대기의 잘림 횟수를 정확히 계산해야 하는 문제였기 때문이다.\n괄호가 생길 때마다 단순히 카운트하는 방식으로는 레이저인지 막대기의 끝인지 구분할 수 없어서 올바른 풀이 방법이 될 수 없었다. 해결 과정 다양한 접근 방식을 검색해보며 스택을 활용한 풀이를 참고했다. 배운 점 힌트를 보지 않고 문제를 읽고 스택을 떠올린 점은 좋았다. 다만 문제를 더 꼼꼼히 읽고 조건을 정확히 파악한 후에 접근하는 연습이 필요하다고 느꼈다.\n앞으로 다양한 문제를 접하며 사고력을 더 키워야겠다.","fields":{"slug":"/archive/study/7/"},"frontmatter":{"title":"[99클럽 코테 스터디] 99클럽 코테 스터디 7일차 TIL + 스택/큐","description":"99클럽 코테 스터디 7일차 TIL + 스택/큐","date":"2025-04-08","tags":["99클럽","코딩테스트준비","개발자취업","항해99","TIL"],"series":"99클럽 코테 스터디","previewImage":"how.png","isPrivate":false}},{"excerpt":"99클럽 코테 스터디 1. 오늘의 학습 키워드 DFS/BFS 문제 URL : https://www.acmicpc.net/problem/4963 2. 공부한 내용 본인의 언어로 정리하기 소스 코드 시도1 3. 오늘의 회고 문제 상황과 시도 이전에 DFS 알고리즘 문제를 풀어본 경험이 있었지만 이번 문제 풀이에서는 제대로 적용하지 못했다. 해결 과정 검색을 통해 다양한 접근 방식을 참고했다. 배운 점 DFS/BFS 알고리즘에 대한 이해를 높이기 위해 더 많은 문제를 풀어봐야겠다.","fields":{"slug":"/archive/study/6/"},"frontmatter":{"title":"[99클럽 코테 스터디] 99클럽 코테 스터디 6일차 TIL + DFS/BFS","description":"99클럽 코테 스터디 6일차 TIL + DFS/BFS","date":"2025-04-07","tags":["99클럽","코딩테스트준비","개발자취업","항해99","TIL"],"series":"99클럽 코테 스터디","previewImage":"how.png","isPrivate":false}},{"excerpt":"99클럽 코테 스터디 1. 오늘의 학습 키워드 투포인터 문제 URL : https://www.acmicpc.net/problem/2559 2. 공부한 내용 본인의 언어로 정리하기 투포인터 정렬된 배열이나 리스트에서 두 개의 포인터를 사용하여 문제를 해결하는 방법을 말한다. 주로 연속된 부분 배열, 구간 합, 정렬된 배열에서 특정 조건을 만족하는 쌍 찾기 등에 사용된다. 소스 코드 시도1 3. 오늘의 회고 문제 상황과 시도 초반에 문제를 잘못 이해하여 연속적인 구간의 합을 구해야 했는데 특정 인덱스끼리의 합을 구하는 방식으로 풀었다. 해결 과정 생각한대로 쉽게 구현이 되었다. 배운 점 처음에는 단순한 시뮬레이션 문제라고 생각했지만 힌트를 보고 투 포인터 알고리즘이 활용된다는 것을 알게 되었다.\n문제의 특성을 정확히 파악하는 것이 중요하다는 점을 다시 한번 느꼈다.","fields":{"slug":"/archive/study/5/"},"frontmatter":{"title":"[99클럽 코테 스터디] 99클럽 코테 스터디 5일차 TIL + 투포인터","description":"99클럽 코테 스터디 5일차 TIL + 투포인터","date":"2025-04-04","tags":["99클럽","코딩테스트준비","개발자취업","항해99","TIL"],"series":"99클럽 코테 스터디","previewImage":"how.png","isPrivate":false}},{"excerpt":"99클럽 코테 스터디 1. 오늘의 학습 키워드 DFS/BFS 문제 URL : https://www.acmicpc.net/problem/2468 2. 공부한 내용 본인의 언어로 정리하기 DFS(깊이 우선 탐색, Depth-First Search) 그래프를 탐색할 때 한 방향으로 갈 수 있을 만큼 깊이 들어가고 더 이상 갈 곳이 없으면 뒤로 돌아와 다른 경로를 탐색하는 방식이다. 스택(Stack) 또는 재귀를 사용해서 구현한다. 사용 사례: 백트래킹, 퍼즐(미로 찾기, 체스 나이트 이동 등), 위상 정렬 BFS(너비 우선 탐색, Breadth-First Search) 그래프를 탐색할 때 가까운 노드부터 차례대로 방문하는 방식이다. 큐(Queue)를 이용해 구현한다. 사용 사례: 최단 경로 찾기(미로, GPS), 네트워크 탐색, 웹 크롤링 소스 코드 시도1 3. 오늘의 회고 문제 상황과 시도 문제를 이해하는 것조차 쉽지 않았다. 특히 물에 잠기지 않는 높이가 왜 존재하지 않는지 의문이 …","fields":{"slug":"/archive/study/4/"},"frontmatter":{"title":"[99클럽 코테 스터디] 99클럽 코테 스터디 4일차 TIL + DFS/BFS","description":"99클럽 코테 스터디 4일차 TIL + DFS/BFS","date":"2025-04-03","tags":["99클럽","코딩테스트준비","개발자취업","항해99","TIL"],"series":"99클럽 코테 스터디","previewImage":"how.png","isPrivate":false}},{"excerpt":"99클럽 코테 스터디 1. 오늘의 학습 키워드 시뮬레이션 문제 URL : https://school.programmers.co.kr/learn/courses/30/lessons/161990 2. 공부한 내용 본인의 언어로 정리하기 시뮬레이션 문제에서 주어진 조건을 그대로 구현하여 해결하는 방법을 말한다. 보통 격자 이동, 회전 같은 문제에서 많이 사용된다. 소스 코드 시도1 3. 오늘의 회고 문제 상황과 시도 문제를 읽고 최단 거리를 구해야 한다고 판단하여 DFS나 BFS 알고리즘을 고려했다.\n그러나 검색을 통해 이러한 접근이 필요하지 않다는 것을 알게 되었다. 해결 과정 머릿속에 떠오르는 방식대로 2차원 배열을 만들어 필요한 변수들을 계산하며 문제를 해결했다. 배운 점 지문에서 요구하는 사항을 정확하게 파악하는 습관을 기르자.","fields":{"slug":"/archive/study/3/"},"frontmatter":{"title":"[99클럽 코테 스터디] 99클럽 코테 스터디 3일차 TIL + 시뮬레이션","description":"99클럽 코테 스터디 3일차 TIL + 시뮬레이션","date":"2025-04-02","tags":["99클럽","코딩테스트준비","개발자취업","항해99","TIL"],"series":"99클럽 코테 스터디","previewImage":"how.png","isPrivate":false}},{"excerpt":"99클럽 코테 스터디 1. 오늘의 학습 키워드 동적계획법 문제 URL : https://www.acmicpc.net/problem/14495 2. 공부한 내용 본인의 언어로 정리하기 동적계획법(Dynamic Programming, DP) 복잡한 문제를 작은 부분 문제로 나누어 해결한 후 그 결과를 저장하여 동일한 계산을 반복하지 않도록 하는 최적화 기법을 말한다. 구현 방법 Top-Down (메모이제이션, Memoization) 재귀를 사용하여 해결한다. 이미 계산한 값을 저장하고 필요할 때 다시 사용한다. Bottom-Up (타뷸레이션, Tabulation) 작은 문제부터 해결하여 큰 문제를 해결한다. 반복문을 사용하여 점진적으로 결과를 계산한다. 소스 코드 시도1 : int형 -> long형으로 변경 시도2 : long형 -> BigInteger 타입으로 변경 시도3 3. 오늘의 회고 문제 상황과 시도 처음에는 int형을 사용해 제출했지만 틀렸다는 결과가 나왔다. n의 최대값인…","fields":{"slug":"/archive/study/2/"},"frontmatter":{"title":"[99클럽 코테 스터디] 99클럽 코테 스터디 2일차 TIL + 동적계획법","description":"99클럽 코테 스터디 2일차 TIL + 동적계획법","date":"2025-04-01","tags":["99클럽","코딩테스트준비","개발자취업","항해99","TIL"],"series":"99클럽 코테 스터디","previewImage":"how.png","isPrivate":false}},{"excerpt":"99클럽 코테 스터디 1. 오늘의 학습 키워드 에라토스테네스의 체 문제 URL : https://www.acmicpc.net/problem/1929 2. 공부한 내용 본인의 언어로 정리하기 소수 1과 자기 자신만을 약수로 가지는 수를 말한다. 0, 1은 소수가 아니다. 소수를 찾는 방법 소인수 분해를 이용하는 방법 에라토스테네스의 체를 이용하는 방법 에라토스테네스의 체 소수를 빠르게 찾는 알고리즘을 말한다. 시간 복잡도가 줄어들게 된다. 원리 소수를 구하고자 하는 범위만큼 배열을 할당한다. 처음 모든 숫자를 소수라고 가정하기 위해서 true로 초기화한다. 2부터 시작해서 특정 수의 배수에 해당하는 수를 모두 지운다.(지울 때 자기자신은 지우지 않고 이미 지워진 수는 건너뛴다.) 2부터 시작하여 남아있는 수를 모두 출력한다. 소스 코드 3. 오늘의 회고 소수의 개념이 기억나지 않아 개념을 찾아보고 코드를 작성해보았다. 처음 시도한 방법은 M과 N 사이의 모든 수를 반복문을 돌면서 소…","fields":{"slug":"/archive/study/1/"},"frontmatter":{"title":"[99클럽 코테 스터디] 99클럽 코테 스터디 1일차 TIL + 에라토스테네스의 체 ","description":"99클럽 코테 스터디 1일차 TIL","date":"2025-03-31","tags":["99클럽","코딩테스트준비","개발자취업","항해99","TIL"],"series":"99클럽 코테 스터디","previewImage":"how.png","isPrivate":false}},{"excerpt":"1. String클래스란? String 클래스는 자바에서 문자열을 다루기 위해 제공하는 클래스입니다. 자바에서 가장 많이 사용되는 클래스 중 하나죠. 문자열을 다루기 위해 기본형인 char 타입을 사용할 수도 있지만, 이 방법은 불편하기 때문에 자바에서는 문자열을 보다 편리하게 처리할 수 있도록 String 클래스를 제공합니다. String 클래스의 주요 특징 중 하나는 불변(Immutable) 객체라는 점입니다. 불변 객체란 값을 변경할 수 없는 객체를 의미하며, String 클래스는 내부적으로 문자열 데이터를 수정할 수 없게 설계되어 있습니다.  위 이미지에서 볼 수 있듯이 value라는 변수는 실제로 String 클래스에서 문자열 데이터를 담는 역할을 합니다. 이 변수는 final로 선언되어 있어 값 변경이 불가능합니다. String 클래스의 소스 코드를 통해 이 구조를 좀 더 자세히 알아보겠습니다. 자바 9 이전에는 char 배열을 이용해 문자열 데이터를 저장했지만, 자바 …","fields":{"slug":"/archive/java/2/"},"frontmatter":{"title":"[Java] String 클래스","description":"String 클래스","date":"2024-11-10","tags":["Java","Study"],"series":"Java","previewImage":"java_logo.png","isPrivate":false}},{"excerpt":"if(kakao) 는 카카오 그룹의 기술 비전을 공개하고 기술적 성과를 소개하는 대표 개발자 컨퍼런스입니다. 매년 참여를 희망하며 신청했지만 올해 처음으로 당첨되는 행운을 얻어 마지막 날 행사에 참석할 수 있었습니다. 0. 셔틀버스 & 굿즈 오전 8시 20분까지 양재역에 도착해 셔틀버스를 타고 행사장으로 이동했습니다. 버스에 타자마자 굿즈를 나눠주셔서 기분 좋게 시작할 수 있었습니다.  이번 행사는 경기도 용인에 위치한 카카오 AI 캠퍼스에서 진행되었는데요. 날씨도 좋고 캠퍼스 건물 역시 인상적이었습니다. 곳곳에 비치된 물, 음료, 견과류 등 간식 덕분에 행사 내내 편하게 즐길 수 있었던 점도 만족스러웠습니다.  1. Panel Talk 오전 10시 오프닝 세션이 시작되었습니다. 이 시간에는 카카오 계열사들이 AI 기술을 어떻게 활용하고 있는지 구체적으로 소개했는데요. 특히 카카오페이와 카카오뱅크가 이상 거래 탐지 시스템(FDS)에 AI를 적용하고 있다는 점이 인상 깊었습니다.  …","fields":{"slug":"/archive/review/1/"},"frontmatter":{"title":"[후기] if(kakao) 2024","description":"if(kakaoAI) 2024 후기","date":"2024-10-25","tags":["컨퍼런스"],"series":"","previewImage":"oop.png","isPrivate":false}},{"excerpt":"스터디에서 다형적참조에 대해 발표하게 되어 정리해보고자 합니다. 0. 서론 다형적 참조에 대해 설명하기 전에 먼저 다형성(Polymorphism)에 대해 알아보죠. 다형성(Polymorphism)은 객체지향 프로그래밍의 중요한 개념중 하나로 여러가지 형태를 가질 수 있는 능력을 의미합니다. 예시를 들자면, 다형성(Polymorphism)은 부모 클래스 타입의 변수가 자식 클래스 타입의 객체를 참조할 수 있다는 것을 뜻합니다. 1. 다형적 참조란? 다시 돌아와서 다형적 참조(Polymorphic Reference)에 대해 알아보죠. 다형적 참조(Polymorphic Reference)는 부모 클래스 타입의 인스턴스로 자식 클래스 타입의 인스턴스를 참조 할 수 있는 기능을 의미합니다. 이는 다형성을 실현하는 방법 중 하나입니다. 다형성과 비슷하다고 생각할 수 있지만 다형성과 다형적 참조는 보시다싶이 서로 다른 개념입니다.\n다형성이 더 포괄적인 개념이죠.\n 2. 예제코드 Animal 클…","fields":{"slug":"/archive/java/1/"},"frontmatter":{"title":"[Java] 다형적 참조","description":"다형적 참조","date":"2024-09-28","tags":["Java","Study"],"series":"Java","previewImage":"java_logo.png","isPrivate":false}},{"excerpt":"0. 서론 최근 면접을 보러 다니면서  Git 브랜치 전략에 대해 설명해 달라는 기술 질문을 공통적으로 받게 되었습니다. 사실 Git으로 소스 commit만 했지, 깊이있게 공부 하지 않았기 때문에 해당 질문에 대답 할 수 없었습니다. 따라서, Git 브랜치 전략에 대해 정리해보고자 합니다. 1. Git 브랜치 전략이란? Git은 브랜치라는 것을 사용하는데요. 브랜치는 특정 시점 스냅샷 같은 개념이라고 생각하시면 됩니다. 브랜치를 사용하면 한 프로젝트에서 서로 여러 작업을 동시에 수행하면서도, 작업간의 영향을 최소화 할 수 있습니다. 이런 Git의 브랜치를 관리하는 전략을 Git 브랜치 전략이라고 말합니다. 2. Git 브랜치 전략 사용 목적 그렇다면 Git 브랜치 전략을 사용하는 목적이 뭘까요? Git 브랜치 전략을 사용하는 목적에는 여러가지가 있지만 문제가 생겼을 때 빠르게 복구하기 위해서라고 생각합니다. 앞서 설명한 것처럼 브랜치를 사용하면 여러 가지 작업을 동시에 안전하게 …","fields":{"slug":"/archive/tech/1/"},"frontmatter":{"title":"[기술면접] Git 브랜치 전략","description":"Git 브랜치 전략","date":"2024-09-04","tags":["Tech","Git"],"series":"기술면접","previewImage":"writing-help.png","isPrivate":false}},{"excerpt":"1. 현상 A팝업 -> B팝업 -> C팝업으로 호출하는 경우 B팝업에서만 팝업 호출 시 해당 화면이 reload 되는 현상이 발생했다. 2. 원인 form 태그 안에  button 태그가 1개만 있는 경우에 onclick() 이벤트와 동시에 submit()도 같이 동작된다. 그래서 발생한 오류였다. 3. 해결 방법1) 방법2) 이런 방법 말고도 검색해보면 다른 방법이 많이 있지만 나의 경우에는 이 2가지 방법으로 했을 때 오류가 발생하지 않았다. button 태그에 대해서 좀 더 알아보다가 재미난 글을 발견하였다. 👉🏻버튼에 타입을 쓰는 이유 (button type='button') 참조 https://nykim.work/96","fields":{"slug":"/error/2/"},"frontmatter":{"title":"[오류] 팝업 여러개 띄울때 화면 reload 발생","description":"팝업 여러개 띄울때 화면 reload 발생","date":"2024-08-25","tags":["Error","Web"],"series":"오류 모음집","previewImage":"how.png","isPrivate":false}},{"excerpt":"1. 현상  메소드를 이용해서 js를 분기처리 하는데 SSL 적용이 된 운영서버에서 http 리소스가 로드되어서 에러가 발생하였다. 2. 원인 web서버에서 was서버를 호출할때는 http 통신이기 때문에 isSecure() 메소드에서 false가 나온 것이다. 3. 해결 방법1) 방법2) 위와 같이 2가지 방법이 있는데 처음에는 x-forwarded-proto를 이용해서 하였으나 로드밸런서가 없는 로컬과 개발에서는 null로 나와서 방법 2로 변경하였다. x-forwarded-proto 클라이언트가 로드밸런서에 접속할 때 사용한 프토토콜을 식별하는 표준 헤더 참조 https://zetawiki.com/wiki/X-Forwarded-Proto","fields":{"slug":"/error/3/"},"frontmatter":{"title":"[오류] https 도메인인데 request.isSecure() return false인 경우","description":"https 도메인인데 request.isSecure() return false인 경우","date":"2024-08-25","tags":["Error","Web"],"series":"오류 모음집","previewImage":"how.png","isPrivate":false}},{"excerpt":"1. 현상 2. 원인 3. 해결 참조","fields":{"slug":"/sample/test/"},"frontmatter":{"title":"test","description":"tet","date":"2024-08-25","tags":["Error","Web"],"series":"오류 모음집","previewImage":"java_logo.png","isPrivate":true}},{"excerpt":"환경설정 개발툴 : InteliJ Spring Boot : 2.7.14 Hibernate : 5.6.15 Java : 11 Gradle SpringBoot 검색을 해보면 application.properties 파일에 이 내용을 추가하면 파라미터 바인딩이 출력된다고 하는데, 저의 경우에는 그렇게 해도 나오지 않았습니다. 이 글을 참고하여 하니 원하는 결과가 나왔습니다. 👉🏻hibernate 의 완성된(?) 쿼리를 확인 하는 방법 문의 드립니다 1. bulid.gradle 파일에 추가 2. logback.xml 파일 추가  폴더 밑에  파일을 만들어줍니다. 3. 실행 결과 파라미터가 같이 나오는 것을 확인 할 수 있습니다.\n 참조 https://www.inflearn.com/questions/59014/hibernate-%EC%9D%98-%EC%99%84%EC%84%B1%EB%90%9C-%EC%BF%BC%EB%A6%AC%EB%A5%BC-%ED%99%95%EC%9D%B8-%ED%95%9…","fields":{"slug":"/archive/jpa/1/"},"frontmatter":{"title":"[JPA] Hibernate 쿼리 파라미터 바인딩 출력","description":"Hibernate 쿼리 파라미터 바인딩 출력","date":"2024-08-25","tags":["JPA","Hibernate"],"series":"JPA","previewImage":"jpa.png","isPrivate":false}},{"excerpt":"환경설정 개발툴 : InteliJ Spring Boot : 2.7.14 Quartz : 2.3.2 Java : 11 Gradle SpringBoot Spring Boot에서 Quartz 연동 하는 예제를 소개합니다. 1. bulid.gradle 파일에 추가 2. @Scheduled 어노테이션을 이용 스케쥴러를 적용할 메소드에  어노테이션을 사용합니다. 이 붙은 파일에  어노테이션를 추가합니다. 추가 하지 않으면 스케쥴러가 실행되지 않습니다. @EnableScheduling 스케쥴러를 기능을 켜는 역할을 하며, @Scheduled 어노테이션을 찾아서 실행을 시킨다. 3. 실행 결과 5초마다 실행 된것을 확인 할 수 있습니다.\n 참조 https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/scheduling/annotation/EnableScheduling.html","fields":{"slug":"/archive/spring/1/"},"frontmatter":{"title":"[Spring Boot] Quartz 연동 예제","description":"Spring Boot Quartz 연동 예제","date":"2024-08-25","tags":["Srping Boot","Quartz"],"series":"Spring Boot","previewImage":"springboot_logo.png","isPrivate":false}},{"excerpt":"1. 현상 개발서버 https 적용으로 아래와 같이 http 요청 블락 에러가 발생하였다. 그래서 아래의 메타 태그를 추가해 줬다.  하지만 개발서버 https 적용을 해제하면서부터 화면 접속시 자동으로  로 붙어서 js, css를 읽는 경우가 발생하였다. 2. 원인 https때문에 추가했던 메타 태그의 문제로, content-security-policy를 설정할 경우 자동으로 https로 호출해 주는 것이었다.  3. 해결 해당 태그를 주석처리 하면 현상은 해결되지만, 개발서버에 https 적용 시 http 요청 블락 에러를 이 방법 말고 다른 방법으로 해야 될 것 같다. 로컬은 http인데 개발서버는 https인 경우에는 이 메타태그를 사용하는 것은 좋은 방법이 아닌 것 같다. 참조 https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/upgrade-insecure-requests","fields":{"slug":"/error/1/"},"frontmatter":{"title":"[오류] 자동으로 도메인에 https가 붙는 경우","description":"자동으로 도메인에 https가 붙는 경우","date":"2024-08-23","tags":["Error","Web"],"series":"오류 모음집","previewImage":"how.png","isPrivate":false}},{"excerpt":"Default Private Posts This is a default private post. It's recommended not to delete this posts 😵 (현재 이 포스트는 삭제하지 말아주세요.)","fields":{"slug":"/default/private-default/"},"frontmatter":{"title":"Default Private","description":null,"date":"2024-01-01","tags":["private-tag"],"series":null,"previewImage":"banned.png","isPrivate":true}},{"excerpt":"환경설정 개발툴 : 이클립스 Spring : 4.3.3 Quartz : 2.3.0 Tomcat : 8.5 Java : 8 서버 :CentOS 1. 현상 개발서버에서 톰캣 프로세스가 여러개가 뜨면서 메모리 너무 많이 잡아먹는 현상이 발생하였다.\nnetstate -tnlp 하면 8080포트는 하나만 나오고, ps -ef | grep tomcat 하면 여러개 나왔다. 2. 원인 검색을 하다가 아래의 글을 보고 quartz 스케쥴러의 문제라고 생각이 들었다.\n톰캣 서버가 종료되어도 이미 실행된 job 스레드는 종료되지 않고 계속 남는다. 👉🏻톰켓 프로세스 종료 이슈 3. 해결 destroy-method 속성을 이용해서 SchedulerFactoryBean 클래스에 있는 destroy() 메소드를 추가해줬다. + 추가(2023.10.13) 위 방법으로 적용 후에도 계속 발생하여 젠킨스 배포시 실행중인 톰캣 프로세스 모두 종료시키는 쉘 스크립트를 추가하였다. 참조 https://docs.spr…","fields":{"slug":"/error/4/"},"frontmatter":{"title":"[오류] 톰캣 프로세스 여러개 뜨는 경우","description":"톰캣 프로세스 여러개 뜨는 경우","date":"2023-08-12","tags":["Error","Tomcat"],"series":"오류 모음집","previewImage":"how.png","isPrivate":false}},{"excerpt":"💡 현 포스트는 about 페이지에서도 조회 가능합니다. 포스트를 삭제하지 말고, 이 곳에다 본인만의 멋진 소개 글을 작성해주세요.","fields":{"slug":"/default/about/"},"frontmatter":{"title":"Gatsby Starter Haon 저자에 대해 소개합니다.","description":null,"date":"2022-01-01","tags":["about"],"series":null,"previewImage":null,"isPrivate":true}}],"group":[{"fieldValue":"","totalCount":1,"nodes":[{"frontmatter":{"date":"2024-10-25"}}]},{"fieldValue":"99클럽 코테 스터디","totalCount":11,"nodes":[{"frontmatter":{"date":"2025-04-14"}},{"frontmatter":{"date":"2025-04-11"}},{"frontmatter":{"date":"2025-04-10"}},{"frontmatter":{"date":"2025-04-09"}},{"frontmatter":{"date":"2025-04-08"}},{"frontmatter":{"date":"2025-04-07"}},{"frontmatter":{"date":"2025-04-04"}},{"frontmatter":{"date":"2025-04-03"}},{"frontmatter":{"date":"2025-04-02"}},{"frontmatter":{"date":"2025-04-01"}},{"frontmatter":{"date":"2025-03-31"}}]},{"fieldValue":"JPA","totalCount":1,"nodes":[{"frontmatter":{"date":"2024-08-25"}}]},{"fieldValue":"Java","totalCount":2,"nodes":[{"frontmatter":{"date":"2024-11-10"}},{"frontmatter":{"date":"2024-09-28"}}]},{"fieldValue":"Spring Boot","totalCount":1,"nodes":[{"frontmatter":{"date":"2024-08-25"}}]},{"fieldValue":"기술면접","totalCount":1,"nodes":[{"frontmatter":{"date":"2024-09-04"}}]},{"fieldValue":"오류 모음집","totalCount":5,"nodes":[{"frontmatter":{"date":"2024-08-25"}},{"frontmatter":{"date":"2024-08-25"}},{"frontmatter":{"date":"2024-08-25"}},{"frontmatter":{"date":"2024-08-23"}},{"frontmatter":{"date":"2023-08-12"}}]}]}},"pageContext":{}},"staticQueryHashes":[],"slicesMap":{}}