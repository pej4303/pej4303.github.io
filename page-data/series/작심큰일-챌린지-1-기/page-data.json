{"componentChunkName":"component---src-templates-series-jsx","path":"/series/작심큰일-챌린지-1-기/","result":{"data":{"allMarkdownRemark":{"totalCount":2,"nodes":[{"excerpt":"1. 📝 문제 요약 문제 URL : https://www.acmicpc.net/problem/2468 난이도 : 백준 실버1 소요시간 : 40분 2. 💡 내 풀이 방법 시도1 접근 방법 입력 배열, 방문배열 생성 bfs 방문배열, 안전영역개수 초기화 영역 순회 현재 높이가 h보다 크고(침수되지 않았고), 방문하지 않은 영역인 경우만 bfs 탐색 출력 소스 코드 3. 🔍 문제 회고 전형적인 BFS 문제였다. 몇 달 전에 한 번 풀었던 기억이 있지만 오랜만에 다시 보니 구현 방법이 정확하게 기억나지 않아 처음부터 차근차근 다시 접근했다. 특히 침수되지 않은 영역만 탐색해야 하는 조건인  부분을 처음에 빠뜨려서 디버깅에 꽤 시간을 허비했다. 📚 참조","fields":{"slug":"/archive/study/jakshim-challenge/2/"},"frontmatter":{"title":"[작심큰일] 작심큰일 2일차 TIL","description":"[작심큰일] 작심큰일 2일차 TIL","date":"2025-08-05","tags":["작심큰일","코딩테스트준비","팀스파르타","TIL"],"series":"작심큰일 챌린지 1기","previewImage":"how.png"}},{"excerpt":"1. 📝 문제 요약 문제 URL : https://www.acmicpc.net/problem/1929 난이도 : 백준 실버3 소요시간 : 14분 2. 💡 내 풀이 방법 시도1 접근 방법 입력 소수 찾기 출력 소스 코드 3. 🔍 문제 회고 이 문제는 범위 내의 모든 소수를 찾는 알고리즘을 구현하는 간단한 문제였다. 기본적인 소수 판별 함수를 작성해 정답을 도출했지만 초반에는 2부터 √N까지만 검사하면 된다는 사실을 잊고 전체 범위를 순회했다. 이후 로직을 수정해 불필요한 연산을 줄일 수 있었다. 하지만 2보다 작은 수를 예외 처리하는 부분을 놓친 점은 아쉬웠지만 빠른 시간 내에 문제를 해결한 점은 좋았다. 📚 참조","fields":{"slug":"/archive/study/jakshim-challenge/1/"},"frontmatter":{"title":"[작심큰일] 작심큰일 1일차 TIL","description":"[작심큰일] 작심큰일 1일차 TIL","date":"2025-08-04","tags":["작심큰일","코딩테스트준비","팀스파르타","TIL"],"series":"작심큰일 챌린지 1기","previewImage":"how.png"}}]}},"pageContext":{"series":"작심큰일 챌린지 1기"}},"staticQueryHashes":[],"slicesMap":{}}