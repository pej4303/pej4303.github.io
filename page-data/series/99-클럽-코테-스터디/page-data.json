{"componentChunkName":"component---src-templates-series-jsx","path":"/series/99-클럽-코테-스터디/","result":{"data":{"allMarkdownRemark":{"totalCount":4,"nodes":[{"excerpt":"99클럽 코테 스터디 1. 오늘의 학습 키워드 DFS/BFS 문제 URL : https://www.acmicpc.net/problem/2468 2. 공부한 내용 본인의 언어로 정리하기 DFS(깊이 우선 탐색, Depth-First Search) 그래프를 탐색할 때 한 방향으로 갈 수 있을 만큼 깊이 들어가고 더 이상 갈 곳이 없으면 뒤로 돌아와 다른 경로를 탐색하는 방식이다. 스택(Stack) 또는 재귀를 사용해서 구현한다. 사용 사례: 백트래킹, 퍼즐(미로 찾기, 체스 나이트 이동 등), 위상 정렬 BFS(너비 우선 탐색, Breadth-First Search) 그래프를 탐색할 때 가까운 노드부터 차례대로 방문하는 방식이다. 큐(Queue)를 이용해 구현한다. 사용 사례: 최단 경로 찾기(미로, GPS), 네트워크 탐색, 웹 크롤링 소스 코드 시도1 3. 오늘의 회고 문제 상황과 시도 문제를 이해하는 것조차 쉽지 않았다. 특히 물에 잠기지 않는 높이가 왜 존재하지 않는지 의문이 …","fields":{"slug":"/archive/study/4/"},"frontmatter":{"title":"[99클럽 코테 스터디] 99클럽 코테 스터디 4일차 TIL + DFS/BFS","description":"99클럽 코테 스터디 4일차 TIL + DFS/BFS","date":"2025-04-03","tags":["99클럽","코딩테스트준비","개발자취업","항해99","TIL"],"series":"99클럽 코테 스터디","previewImage":"how.png"}},{"excerpt":"99클럽 코테 스터디 1. 오늘의 학습 키워드 시뮬레이션 문제 URL : https://school.programmers.co.kr/learn/courses/30/lessons/161990 2. 공부한 내용 본인의 언어로 정리하기 시뮬레이션 문제에서 주어진 조건을 그대로 구현하여 해결하는 방법을 말한다. 보통 격자 이동, 회전 같은 문제에서 많이 사용된다. 소스 코드 시도1 3. 오늘의 회고 문제 상황과 시도 문제를 읽고 최단 거리를 구해야 한다고 판단하여 DFS나 BFS 알고리즘을 고려했다.\n그러나 검색을 통해 이러한 접근이 필요하지 않다는 것을 알게 되었다. 해결 과정 머릿속에 떠오르는 방식대로 2차원 배열을 만들어 필요한 변수들을 계산하며 문제를 해결했다. 배운 점 지문에서 요구하는 사항을 정확하게 파악하는 습관을 기르자.","fields":{"slug":"/archive/study/3/"},"frontmatter":{"title":"[99클럽 코테 스터디] 99클럽 코테 스터디 3일차 TIL + 시뮬레이션","description":"99클럽 코테 스터디 3일차 TIL + 시뮬레이션","date":"2025-04-02","tags":["99클럽","코딩테스트준비","개발자취업","항해99","TIL"],"series":"99클럽 코테 스터디","previewImage":"how.png"}},{"excerpt":"99클럽 코테 스터디 1. 오늘의 학습 키워드 동적계획법 문제 URL : https://www.acmicpc.net/problem/14495 2. 공부한 내용 본인의 언어로 정리하기 동적계획법(Dynamic Programming, DP) 복잡한 문제를 작은 부분 문제로 나누어 해결한 후 그 결과를 저장하여 동일한 계산을 반복하지 않도록 하는 최적화 기법을 말한다. 구현 방법 Top-Down (메모이제이션, Memoization) 재귀를 사용하여 해결한다. 이미 계산한 값을 저장하고 필요할 때 다시 사용한다. Bottom-Up (타뷸레이션, Tabulation) 작은 문제부터 해결하여 큰 문제를 해결한다. 반복문을 사용하여 점진적으로 결과를 계산한다. 소스 코드 시도1 : int형 -> long형으로 변경 시도2 : long형 -> BigInteger 타입으로 변경 시도3 3. 오늘의 회고 문제 상황과 시도 처음에는 int형을 사용해 제출했지만 틀렸다는 결과가 나왔다. n의 최대값인…","fields":{"slug":"/archive/study/2/"},"frontmatter":{"title":"[99클럽 코테 스터디] 99클럽 코테 스터디 2일차 TIL + 동적계획법","description":"99클럽 코테 스터디 2일차 TIL + 동적계획법","date":"2025-04-01","tags":["99클럽","코딩테스트준비","개발자취업","항해99","TIL"],"series":"99클럽 코테 스터디","previewImage":"how.png"}},{"excerpt":"99클럽 코테 스터디 1. 오늘의 학습 키워드 에라토스테네스의 체 문제 URL : https://www.acmicpc.net/problem/1929 2. 공부한 내용 본인의 언어로 정리하기 소수 1과 자기 자신만을 약수로 가지는 수를 말한다. 0, 1은 소수가 아니다. 소수를 찾는 방법 소인수 분해를 이용하는 방법 에라토스테네스의 체를 이용하는 방법 에라토스테네스의 체 소수를 빠르게 찾는 알고리즘을 말한다. 시간 복잡도가 줄어들게 된다. 원리 소수를 구하고자 하는 범위만큼 배열을 할당한다. 처음 모든 숫자를 소수라고 가정하기 위해서 true로 초기화한다. 2부터 시작해서 특정 수의 배수에 해당하는 수를 모두 지운다.(지울 때 자기자신은 지우지 않고 이미 지워진 수는 건너뛴다.) 2부터 시작하여 남아있는 수를 모두 출력한다. 소스 코드 3. 오늘의 회고 소수의 개념이 기억나지 않아 개념을 찾아보고 코드를 작성해보았다. 처음 시도한 방법은 M과 N 사이의 모든 수를 반복문을 돌면서 소…","fields":{"slug":"/archive/study/1/"},"frontmatter":{"title":"[99클럽 코테 스터디] 99클럽 코테 스터디 1일차 TIL + 에라토스테네스의 체 ","description":"99클럽 코테 스터디 1일차 TIL","date":"2025-03-31","tags":["99클럽","코딩테스트준비","개발자취업","항해99","TIL"],"series":"99클럽 코테 스터디","previewImage":"how.png"}}]}},"pageContext":{"series":"99클럽 코테 스터디"}},"staticQueryHashes":[],"slicesMap":{}}