{"componentChunkName":"component---src-templates-post-jsx","path":"/archive/tech/1/","result":{"data":{"site":{"siteMetadata":{"title":"보통사람","author":"pej4303"}},"markdownRemark":{"id":"e5b73986-6232-57c8-9c82-8877e384f1b6","excerpt":"0. 서론 최근 면접을 보러 다니면서  Git 브랜치 전략에 대해 설명해 달라는 기술 질문을 공통적으로 받게 되었습니다. 사실 Git으로 소스 commit만 했지, 깊이있게 공부 하지 않았기 때문에 해당 질문에 대답 할 수 없었습니다. 따라서, Git…","html":"<h2 id=\"0-서론\" style=\"position:relative;\"><a href=\"#0-%EC%84%9C%EB%A1%A0\" aria-label=\"0 서론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>0. 서론</h2>\n<p>최근 면접을 보러 다니면서  <strong>Git 브랜치 전략</strong>에 대해 설명해 달라는 기술 질문을 공통적으로 받게 되었습니다. 사실 Git으로 소스 commit만 했지, 깊이있게 공부 하지 않았기 때문에 해당 질문에 대답 할 수 없었습니다.</p>\n<p>따라서, Git 브랜치 전략에 대해 정리해보고자 합니다.</p>\n<h2 id=\"1-git-브랜치-전략이란\" style=\"position:relative;\"><a href=\"#1-git-%EB%B8%8C%EB%9E%9C%EC%B9%98-%EC%A0%84%EB%9E%B5%EC%9D%B4%EB%9E%80\" aria-label=\"1 git 브랜치 전략이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Git 브랜치 전략이란?</h2>\n<p>Git은 브랜치라는 것을 사용하는데요. 브랜치는 특정 시점 스냅샷 같은 개념이라고 생각하시면 됩니다.<br>\n브랜치를 사용하면 한 프로젝트에서 서로 여러 작업을 동시에 수행하면서도, 작업간의 영향을 최소화 할 수 있습니다.</p>\n<p>이런 Git의 브랜치를 관리하는 전략을 Git 브랜치 전략이라고 말합니다.</p>\n<h2 id=\"2-git-브랜치-전략-사용-목적\" style=\"position:relative;\"><a href=\"#2-git-%EB%B8%8C%EB%9E%9C%EC%B9%98-%EC%A0%84%EB%9E%B5-%EC%82%AC%EC%9A%A9-%EB%AA%A9%EC%A0%81\" aria-label=\"2 git 브랜치 전략 사용 목적 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Git 브랜치 전략 사용 목적</h2>\n<p>그렇다면 Git 브랜치 전략을 사용하는 목적이 뭘까요?<br>\nGit 브랜치 전략을 사용하는 목적에는 여러가지가 있지만 <strong>문제가 생겼을 때 빠르게 복구하기 위해서</strong>라고 생각합니다. 앞서 설명한 것처럼 브랜치를 사용하면 여러 가지 작업을 동시에 안전하게 진행할 수 있고, 언제든지 문제가 생기면 원래 상태로 돌아갈 수 있습니다.</p>\n<h2 id=\"3-git-브랜치-전략-종류\" style=\"position:relative;\"><a href=\"#3-git-%EB%B8%8C%EB%9E%9C%EC%B9%98-%EC%A0%84%EB%9E%B5-%EC%A2%85%EB%A5%98\" aria-label=\"3 git 브랜치 전략 종류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Git 브랜치 전략 종류</h2>\n<p>대표적인 Git 브랜치 전략에 대해 알아보겠습니다.</p>\n<ul>\n<li>Git Flow\n<ul>\n<li>브랜치 설명\n<ul>\n<li><code class=\"language-text\">main 브랜치</code>\n<ul>\n<li>main 또는 master 브랜치 의미.</li>\n<li>항상 배포 가능한 상태를 유지해야 합니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">develop 브랜치</code>\n<ul>\n<li>개발이 완료된 코드를 통합하는 브랜치.</li>\n<li>모든 기능은 develop 브랜치로 병합된 후 테스트 되어야 합니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">feature 브랜치</code>\n<ul>\n<li>개발을 위해 develop 브랜치에서 파생된 브랜치.</li>\n<li>개발이 완료되면 develop 브랜치로 병합됩니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">release 브랜치</code>\n<ul>\n<li>배포 준비가 된 코드를 관리하는 브랜치.</li>\n<li>develop 브랜치에서 파생되어 테스트와 버그 수정을 거쳐 main 브랜치에 병합됩니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">hotfix 브랜치</code>\n<ul>\n<li>main 브랜치에서 직접 파생된 브랜치.</li>\n<li>긴급한 버그 수정을 위해 사용되며, 수정 후 main과 develop 브랜치에 병합됩니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>과정</li>\n</ul>\n<img src=\"https://images.squarespace-cdn.com/content/v1/5cd29903aadd34273bef66f8/50f3fcb5-5798-481c-85f0-5a85f0886ed9/Gitflow.png?format=2500w\" alt=\"GitFlow\">\n<ul>\n<li>특징\n<ul>\n<li>복잡한 프로젝트에서 브랜치를 체계적으로 관리하기 위한 전략입니다. <strong>주로 여러 단계의 개발과 배포를 체계적으로 관리하고자 할 때 사용</strong>됩니다.</li>\n<li><strong>릴리즈와 관련된 버전을 체계적으로 관리하는 데 유리</strong>합니다.</li>\n</ul>\n</li>\n<li>장/단점\n<ul>\n<li>개발과 릴리즈 준비를 분리하여 안정성을 유지할 수 있습니다.</li>\n<li>브랜치가 많아지면 복잡해질수 있습니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>GitHub Flow\n<ul>\n<li>브랜치 설명\n<ul>\n<li><code class=\"language-text\">main 브랜치</code>:\n<ul>\n<li>Git Flow의 <code class=\"language-text\">main 브랜치</code>와 동일합니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">feature 브랜치</code>:\n<ul>\n<li>기능 또는 버그 수정을 위해 main 브랜치에서 파생된 브랜치</li>\n<li>개발이 완료되면 <code class=\"language-text\">pull request</code>를 통해 코드 리뷰를 받고 main 브랜치로 병합됩니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>과정</li>\n</ul>\n<img src=\"https://images.squarespace-cdn.com/content/v1/5cd29903aadd34273bef66f8/e05668eb-89fa-4ee0-8350-35c93d029fad/GitHub+Flow.png?format=2500w\" alt=\"GitHubFlow\">\n<ul>\n<li>특징\n<ul>\n<li>소규모이거나 빠른 배포 주기를 가진 프로젝트를 위해 제안된 <strong>간단하고 단순한 브랜치 전략</strong>입니다.</li>\n<li>단일 main 브랜치에서 이루어지며, feature 브랜치를 통해 코드 변경을 관리합니다.</li>\n<li>GitHub Flow는 PR 생성 시 자동으로 테스트가 실행되도록 설정할 수 있습니다. 이를 통해 코드가 main 브랜치에 병합되기 전에 버그가 없는지 기능이 정상적으로 동작하는지를 확인할 수 있습니다. 이를 통해 소스 코드의 품질까지 향상 시킬 수 있습니다.</li>\n</ul>\n</li>\n<li>장/단점\n<ul>\n<li>간단하고 직관적인 구조, 빠른 배포와 피드백 주기에 적합합니다.</li>\n<li>릴리즈와 핫픽스 관리가 다소 비효율적일 수 있습니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>GitLab Flow\n<ul>\n<li>브랜치 설명\n<ul>\n<li><code class=\"language-text\">production 브랜치</code>\n<ul>\n<li>운영 환경에 배포되는 브랜치.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">environment-specific 브랜치</code>\n<ul>\n<li>다양한 환경(staging, pre-production 등)에 맞는 브랜치로, 각 환경에 맞게 코드가 준비됩니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">feature 브랜치</code>\n<ul>\n<li>개발을 위한 브랜치로 특정 환경 브랜치에 병합됩니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>과정</li>\n</ul>\n<img src=\"https://images.squarespace-cdn.com/content/v1/5cd29903aadd34273bef66f8/87ed52b9-cb2e-456a-b345-c04121fb49b2/Gitlab+flow.png?format=2500w\" alt=\"GitLabFlow\">\n<ul>\n<li>특징\n<ul>\n<li><strong>GitHub Flow와 Git Flow의 장점을 결합</strong>한 브랜치 전략입니다.</li>\n<li>주로 main 브랜치와 feature 브랜치 외에도 환경 기반 브랜치를 사용합니다.</li>\n</ul>\n</li>\n<li>장/단점\n<ul>\n<li>환경에 맞는 브랜치 관리로 안정성 향상시킬 수 있으나, 환경 브랜치 관리가 복잡할 수 있습니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4-결론\" style=\"position:relative;\"><a href=\"#4-%EA%B2%B0%EB%A1%A0\" aria-label=\"4 결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 결론</h2>\n<p>배포를 체계적으로 해야되는 경우에는 Git Flow를 사용하고, 배포를 자주 해야되는 경우에는 GitHub Flow를 사용하면 될 것 같습니다.\r\n프로젝트의 규모와 배포 주기에 따라서 알맞은 Git 브랜치 전략을 세우는것이 중요합니다.</p>\n<ul>\n<li>참조\n<ul>\n<li><a href=\"https://be-student.tistory.com/83\">https://be-student.tistory.com/83</a></li>\n<li><a href=\"https://parkstate.tistory.com/33\">https://parkstate.tistory.com/33</a></li>\n<li><a href=\"https://www.eisquare.co.uk/blogs/how-to-choose-your-branching-strategy\">https://www.eisquare.co.uk/blogs/how-to-choose-your-branching-strategy</a></li>\n</ul>\n</li>\n</ul>","tableOfContents":"<ul>\n<li><a href=\"#0-%EC%84%9C%EB%A1%A0\">0. 서론</a></li>\n<li><a href=\"#1-git-%EB%B8%8C%EB%9E%9C%EC%B9%98-%EC%A0%84%EB%9E%B5%EC%9D%B4%EB%9E%80\">1. Git 브랜치 전략이란?</a></li>\n<li><a href=\"#2-git-%EB%B8%8C%EB%9E%9C%EC%B9%98-%EC%A0%84%EB%9E%B5-%EC%82%AC%EC%9A%A9-%EB%AA%A9%EC%A0%81\">2. Git 브랜치 전략 사용 목적</a></li>\n<li><a href=\"#3-git-%EB%B8%8C%EB%9E%9C%EC%B9%98-%EC%A0%84%EB%9E%B5-%EC%A2%85%EB%A5%98\">3. Git 브랜치 전략 종류</a></li>\n<li><a href=\"#4-%EA%B2%B0%EB%A1%A0\">4. 결론</a></li>\n</ul>","frontmatter":{"title":"[기술면접] Git 브랜치 전략","description":"Git 브랜치 전략","date":"September 04, 2024","tags":["Tech","Git"],"series":"기술면접","previewImage":"writing-help.png","isPrivate":false}},"previous":{"fields":{"slug":"/archive/spring/1/"},"frontmatter":{"title":"[Spring Boot] Quartz 연동 예제","isPrivate":false}},"next":{"fields":{"slug":"/archive/java/1/"},"frontmatter":{"title":"[Java] 다형적 참조","isPrivate":false}}},"pageContext":{"id":"e5b73986-6232-57c8-9c82-8877e384f1b6","previousPostId":"1846a252-fcbb-5b6a-b950-53029489ccad","nextPostId":"fa320e8d-1f1e-56fe-8889-98ff94ac42b2"}},"staticQueryHashes":[],"slicesMap":{}}