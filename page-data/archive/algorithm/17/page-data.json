{"componentChunkName":"component---src-templates-post-jsx","path":"/archive/algorithm/17/","result":{"data":{"site":{"siteMetadata":{"title":"보통사람","author":"pej4303"}},"markdownRemark":{"id":"8fb40a4d-387a-5416-bc41-7c12036954c1","excerpt":"1. 문제 요약 문제 URL : https://school.programmers.co.kr/learn/courses/30/lessons/42587 난이도 : 레벨2 2. 내 풀이 방법 시도1 접근 방법 우선순위 큐 생성, index 변수 생성 우선순위 큐에 priorities…","html":"<h2 id=\"1-문제-요약\" style=\"position:relative;\"><a href=\"#1-%EB%AC%B8%EC%A0%9C-%EC%9A%94%EC%95%BD\" aria-label=\"1 문제 요약 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 문제 요약</h2>\n<ul>\n<li>문제 URL : <a href=\"https://school.programmers.co.kr/learn/courses/30/lessons/42587\">https://school.programmers.co.kr/learn/courses/30/lessons/42587</a></li>\n<li>난이도 : 레벨2</li>\n</ul>\n<h2 id=\"2-내-풀이-방법\" style=\"position:relative;\"><a href=\"#2-%EB%82%B4-%ED%92%80%EC%9D%B4-%EB%B0%A9%EB%B2%95\" aria-label=\"2 내 풀이 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 내 풀이 방법</h2>\n<h3 id=\"시도1\" style=\"position:relative;\"><a href=\"#%EC%8B%9C%EB%8F%841\" aria-label=\"시도1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>시도1</h3>\n<ul>\n<li>접근 방법\n<ul>\n<li>우선순위 큐 생성, index 변수 생성</li>\n<li>우선순위 큐에 priorities 배열 담기</li>\n<li>우선순위 큐를 순회하면서 index가 location과 같으면 break 다르면 answer 증가</li>\n<li>answer 반환</li>\n</ul>\n</li>\n<li>문제점\n<ul>\n<li>우선순위 큐를 넣으면 순서가 달라진다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"시도2\" style=\"position:relative;\"><a href=\"#%EC%8B%9C%EB%8F%842\" aria-label=\"시도2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>시도2</h3>\n<ul>\n<li>접근 방법\n<ul>\n<li>큐 생성</li>\n<li>큐에 priorities 배열 담기</li>\n<li>로직 처리\n<ul>\n<li>실행 대기 큐(Queue)에서 대기중인 프로세스 하나를 꺼냅니다.</li>\n<li>큐에 대기중인 프로세스 중 우선순위가 더 높은 프로세스가 있다면 방금 꺼낸 프로세스를 다시 큐에 넣습니다.</li>\n<li>만약 그런 프로세스가 없다면 방금 꺼낸 프로세스를 실행합니다.</li>\n<li>한 번 실행한 프로세스는 다시 큐에 넣지 않고 그대로 종료됩니다.</li>\n</ul>\n</li>\n<li>answer 반환</li>\n</ul>\n</li>\n<li>소스 코드\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Process</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> priority<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Process</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> priority<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>index <span class=\"token operator\">=</span> index<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>priority <span class=\"token operator\">=</span> priority<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> priorities<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> location<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> answer <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    \n        <span class=\"token comment\">// 1. 큐 생성 - Process를 담는 큐</span>\n        <span class=\"token class-name\">Queue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Process</span><span class=\"token punctuation\">></span></span> queue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token comment\">// 2. 큐에 priorities 배열 담기</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>priorities<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            queue<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Process</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> priorities<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// 3. 로직 처리</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// - 실행 대기 큐(Queue)에서 대기중인 프로세스 하나를 꺼냅니다.</span>\n            <span class=\"token class-name\">Process</span> process <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            \n            <span class=\"token keyword\">boolean</span> isFlag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Process</span> p <span class=\"token operator\">:</span> queue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>priority <span class=\"token operator\">></span> process<span class=\"token punctuation\">.</span>priority<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    isFlag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            \n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isFlag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// - 큐에 대기중인 프로세스 중 우선순위가 더 높은 프로세스가 있다면 방금 꺼낸 프로세스를 다시 큐에 넣습니다.</span>\n                queue<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// - 만약 그런 프로세스가 없다면 방금 꺼낸 프로세스를 실행합니다.</span>\n                answer<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>index <span class=\"token operator\">==</span> location<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> answer<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            \n            <span class=\"token comment\">// - 한 번 실행한 프로세스는 다시 큐에 넣지 않고 그대로 종료됩니다.</span>\n        <span class=\"token punctuation\">}</span>\n    \n        \n        <span class=\"token comment\">// 해당 프로세스가 몇 번째로 실행되는지 return</span>\n        <span class=\"token keyword\">return</span> answer<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"3-문제-회고\" style=\"position:relative;\"><a href=\"#3-%EB%AC%B8%EC%A0%9C-%ED%9A%8C%EA%B3%A0\" aria-label=\"3 문제 회고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 문제 회고</h2>\n<ul>\n<li>🔍 시도</li>\n</ul>\n<p>문제를 읽고 우선순위 큐를 떠올렸으나 우선순위 큐는 내부적으로 정렬이 되어 원래 프로세스들의 순서가 바뀌기 때문에 위치 정보를 추적하는 데 어려움이 있었다. 이로 인해 정확한 실행 순서를 알기 어려웠다.</p>\n<ul>\n<li>🛠 해결 과정</li>\n</ul>\n<p>원래 순서와 우선순위를 모두 고려하기 위해 Process라는 클래스를 만들어 인덱스와 우선순위를 멤버변수로 추가하였다. 그리고 큐를 사용해 프로세스들을 순서대로 처리하면서 큐 안에 더 높은 우선순위를 가진 프로세스가 있는지 매번 확인하는 방법을 적용하였다. 이렇게 하니 문제에서 요구하는 실행 순서대로 프로세스를 처리할 수 있었다.</p>\n<ul>\n<li>⚠ 개선할 점</li>\n</ul>\n<p>현재 구현은 매번 큐를 순회하면서 우선순위가 더 높은 프로세스가 있는지 확인하는데 시간복잡도에 문제가 있는지 확인해보면 좋을 것 같다.</p>\n<h2 id=\"참조\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EC%A1%B0\" aria-label=\"참조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참조</h2>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#1-%EB%AC%B8%EC%A0%9C-%EC%9A%94%EC%95%BD\">1. 문제 요약</a></p>\n</li>\n<li>\n<p><a href=\"#2-%EB%82%B4-%ED%92%80%EC%9D%B4-%EB%B0%A9%EB%B2%95\">2. 내 풀이 방법</a></p>\n<ul>\n<li><a href=\"#%EC%8B%9C%EB%8F%841\">시도1</a></li>\n<li><a href=\"#%EC%8B%9C%EB%8F%842\">시도2</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#3-%EB%AC%B8%EC%A0%9C-%ED%9A%8C%EA%B3%A0\">3. 문제 회고</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%B0%B8%EC%A1%B0\">참조</a></p>\n</li>\n</ul>","frontmatter":{"title":"[프로그래머스] 프로세스 Java","description":"프로세스 Java","date":"June 03, 2025","tags":["Algorithm","프로그래머스","코딩테스트"],"series":"프로그래머스","previewImage":"writing.png","isPrivate":false}},"previous":{"fields":{"slug":"/archive/algorithm/16/"},"frontmatter":{"title":"[프로그래머스] 택배 상자 Java","isPrivate":false}},"next":{"fields":{"slug":"/archive/algorithm/18/"},"frontmatter":{"title":"[프로그래머스] 올바른 괄호 Java","isPrivate":false}}},"pageContext":{"id":"8fb40a4d-387a-5416-bc41-7c12036954c1","previousPostId":"4d85b552-f629-58d3-a5c8-abef890da40d","nextPostId":"fb72e54f-c915-5fcc-8dea-b650d8c3be0c"}},"staticQueryHashes":[],"slicesMap":{}}