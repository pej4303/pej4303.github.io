{"version":3,"file":"component---src-pages-search-jsx-24ef690a97326979ca24.js","mappings":"6NAuBA,MApBe,IAAuC,IAAtC,SAAEA,EAAQ,YAAEC,EAAW,MAAEC,GAAO,EAC9C,MAAM,EAACC,EAAU,EAACC,IAAgBC,EAAAA,EAAAA,WAAS,GAE3C,OACE,gBAACC,EAAe,KACd,gBAACC,EAAK,KAAC,WACP,gBAACC,EAAK,CACJC,KAAK,OACLT,SAAUA,EACVC,YAAaA,EACbS,QAAS,IAAMN,GAAa,GAC5BO,OAAQ,IAAMP,GAAa,GAC3BD,UAAWA,IAEb,gBAACS,EAAS,CAACT,UAAWA,IACtB,gBAACU,EAAW,CAACX,MAAOA,IACJ,EAMtB,MAAMI,EAAkBQ,EAAAA,QAAOC,IAAG,8EAAVD,CAAU,sFAQ5BP,EAAQO,EAAAA,QAAOE,GAAE,oEAATF,CAAS,oIACZG,GAASA,EAAMC,MAAMC,KAAKC,OAMRH,GAASA,EAAMC,MAAMC,KAAKE,SAGjDb,EAAQM,EAAAA,QAAOQ,MAAK,oEAAZR,CAAY,ofAEfG,GAASA,EAAMC,MAAMC,KAAKC,OAIZH,GAASA,EAAMC,MAAMK,OAAOD,MAAME,SAErCP,GAASA,EAAMC,MAAMK,OAAOD,MAAMG,KAgBlDb,EAAYE,EAAAA,QAAOY,KAAI,wEAAXZ,CAAW,uIAGlB,QAAC,UAAEX,GAAW,SAAMA,EAAY,SAAW,GAAG,IAEnCc,GAASA,EAAMC,MAAMK,OAAOI,YACrC,QAAC,UAAExB,GAAW,SAAMA,EAAY,EAAI,CAAC,IAI5CU,EAAcC,EAAAA,QAAOC,IAAG,0EAAVD,CAAU,0MAMnBG,GAASA,EAAMC,MAAMC,KAAKC,OACxB,QAAC,MAAElB,GAAO,SAAgB,IAAVA,EAAc,EAAI,CAAC,IAEhC,QAAC,MAAEA,GAAO,SAAgB,IAAVA,EAAc,SAAW,SAAS,IAGlDe,GAA0B,IAAhBA,EAAMf,MAAc,gCAAmD,IAAhBe,EAAMf,MAAc,yBAAwB,aAAgBe,EAAMf,MAAK,kB,wBCpDxJ,MA7BuB,IAAe,IAAd,KAAE0B,GAAM,EAC5B,MAAMC,EAAQD,EAAKE,kBAAkBC,MAC/BC,EAAqBH,EAAMI,QAAOC,IAASA,EAAKC,YAAYC,YAE5DC,GADQC,EAAAA,aAAaC,OACPD,EAAAA,aAAaD,cAE3B,EAACG,EAAM,EAACC,IAAYpC,EAAAA,EAAAA,UAAS,MAE7BqC,GAAgBC,EAAAA,EAAAA,aACpBX,EAAmBC,QAAOC,IACxB,MAAM,YAAEC,EAAW,gBAAES,GAAoBV,GACnC,MAAEW,GAAUV,EACZW,GAAcN,GAAS,IAAIO,oBAEjC,QAAIH,EAAgBG,oBAAoBC,SAASF,IAE1CD,EAAME,oBAAoBC,SAASF,EAAW,IACnD,CAACN,EAAOX,IAGd,OACI,gBAAC,IAAU,KACT,gBAAC,IAAG,CAACgB,MAAOP,EAAAA,aAAaO,MAAOR,YAAaA,IAC7C,gBAAC,EAAM,CAACrC,SAAUiD,GAAKR,EAASQ,EAAEC,OAAOC,OAAQlD,YAAY,4BAA4BC,MAAOsC,EAAQE,EAAcU,OAAS,IAC9HZ,GAASE,EAAcU,OAAS,GAAK,gBAAC,IAAQ,CAACvB,MAAOa,IAC5C,C","sources":["webpack://gatsby-starter-default/./src/components/search/index.jsx","webpack://gatsby-starter-default/./src/pages/search.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport styled from 'styled-components';\r\n\r\nconst Search = ({ onChange, placeholder, count }) => {\r\n  const [isFocused, setIsFocused] = useState(false);\r\n\r\n  return (\r\n    <SearchContainer>\r\n      <Title>Search.</Title>\r\n      <Input\r\n        type=\"text\"\r\n        onChange={onChange}\r\n        placeholder={placeholder}\r\n        onFocus={() => setIsFocused(true)}\r\n        onBlur={() => setIsFocused(false)}\r\n        isFocused={isFocused}\r\n      />\r\n      <Underline isFocused={isFocused} />\r\n      <ResultCount count={count}/>\r\n    </SearchContainer>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n\r\nconst SearchContainer = styled.div`\r\n  position: relative;\r\n  margin-top: 20px;\r\n  margin-bottom: 100px;\r\n  cursor: text;\r\n  max-width: 95%;\r\n`;\r\n\r\nconst Title = styled.h1`\r\n  color: ${props => props.theme.main.text}; \r\n  font-size: 45px;\r\n  font-style: italic;\r\n  font-weight: 700;\r\n  margin-bottom: 40px;\r\n  padding-bottom: 30px;\r\n  border-bottom: 1px solid ${props => props.theme.main.border}; \r\n`\r\n\r\nconst Input = styled.input`\r\n  font-size: 18px;\r\n  color: ${props => props.theme.main.text};\r\n  width: 95%;\r\n  height: 60px;\r\n  border: none;\r\n  border-bottom: solid ${props => props.theme.search.input.bottom} 2px;\r\n  padding-left: 40px;\r\n  background-color: ${props => props.theme.search.input.bg};\r\n  border-radius: 5px;\r\n  background-image: url('data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"%23888\" viewBox=\"0 0 24 24\"><path d=\"M21 19l-5-5a9 9 0 1 0-1.4 1.4l5 5 1.4-1.4zM17 9a7 7 0 1 1-14 0 7 7 0 0 1 14 0z\"/></svg>');\r\n  background-repeat: no-repeat;\r\n  background-position: 5px center; \r\n  background-size: 20px; \r\n\r\n  &::placeholder {\r\n    color: #888;\r\n  }\r\n\r\n  &:focus {\r\n    outline: none;\r\n  }\r\n`;\r\n\r\nconst Underline = styled.span`\r\n  position: absolute;\r\n  left: 0;  \r\n  width: ${({ isFocused }) => (isFocused ? '100.5%' : '0')};\r\n  height: 1.5px;\r\n  background-color: ${props => props.theme.search.underline};\r\n  opacity: ${({ isFocused }) => (isFocused ? 1 : 0)};\r\n  transition: width 1s ease, opacity 1s ease-in-out; \r\n`;\r\n\r\nconst ResultCount = styled.div`\r\n  position: absolute;\r\n  top: 170px;\r\n  font-size: 20px;\r\n  font-weight: 700;\r\n  margin-top: 30px;\r\n  color: ${props => props.theme.main.text};\r\n  opacity: ${({ count }) => (count === 0 ? 0 : 1)};\r\n  transition: opacity 1s ease-in-out, visibility 1s ease-in-out;\r\n  visibility: ${({ count }) => (count === 0 ? 'hidden' : 'visible')}; \r\n\r\n  &:before {\r\n    content: '${props => (props.count === 0 ? 'No matching posts were found.' : (props.count === 1 ? 'There is 1 post found.' : `There are ${props.count} posts found.`))}';\r\n  }\r\n`;","import React, { useCallback, useState } from \"react\"\r\nimport { graphql } from \"gatsby\"\r\nimport PageLayout from  \"../components/layout/page-component\"\r\nimport PostList from \"../components/postlist\"\r\nimport Search from \"../components/search\"\r\nimport Seo from \"../components/seo\"\r\nimport { siteMetadata } from \"../../gatsby-config\"\r\n\r\nconst SearchTemplate = ({ data }) => {\r\n    const posts = data.allMarkdownRemark.nodes\r\n    const filterPrivatePosts = posts.filter(post => !post.frontmatter.isPrivate);\r\n    const title = siteMetadata.author;\r\n    const description = siteMetadata.description;\r\n\r\n    const [query, setQuery] = useState(null) // Initialize with null\r\n\r\n    const filteredPosts = useCallback(\r\n      filterPrivatePosts.filter(post => {\r\n        const { frontmatter, rawMarkdownBody } = post\r\n        const { title } = frontmatter\r\n        const lowerQuery = (query || '').toLocaleLowerCase() // Handle null query\r\n\r\n        if (rawMarkdownBody.toLocaleLowerCase().includes(lowerQuery)) return true\r\n\r\n        return title.toLocaleLowerCase().includes(lowerQuery)\r\n      }), [query, posts]\r\n    )\r\n\r\n    return (\r\n        <PageLayout>\r\n          <Seo title={siteMetadata.title} description={description}/>\r\n          <Search onChange={e => setQuery(e.target.value)} placeholder=\"Enter your search keyword\" count={query ? filteredPosts.length : 0}/>  \r\n          {query && filteredPosts.length > 0 && <PostList posts={filteredPosts}/>}\r\n        </PageLayout>\r\n    )\r\n}\r\n\r\nexport default SearchTemplate\r\n\r\nexport const pageQuery = graphql`\r\n  query {\r\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\r\n      nodes {\r\n        excerpt(pruneLength: 200, truncate: true)\r\n        fields {\r\n          slug\r\n        }\r\n        frontmatter {\r\n          date(formatString: \"MMMM DD, YYYY\")\r\n          title\r\n          description\r\n          tags\r\n          series\r\n          previewImage\r\n          isPrivate\r\n        }\r\n        rawMarkdownBody\r\n      }\r\n    }\r\n  }\r\n`"],"names":["onChange","placeholder","count","isFocused","setIsFocused","useState","SearchContainer","Title","Input","type","onFocus","onBlur","Underline","ResultCount","styled","div","h1","props","theme","main","text","border","input","search","bottom","bg","span","underline","data","posts","allMarkdownRemark","nodes","filterPrivatePosts","filter","post","frontmatter","isPrivate","description","siteMetadata","author","query","setQuery","filteredPosts","useCallback","rawMarkdownBody","title","lowerQuery","toLocaleLowerCase","includes","e","target","value","length"],"sourceRoot":""}